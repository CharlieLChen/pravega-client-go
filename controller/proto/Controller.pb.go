//*
// Copyright Pravega Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: controller-client/proto/Controller.proto

package controller_api_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReaderGroupConfiguration_RetentionType int32

const (
	ReaderGroupConfiguration_NONE      ReaderGroupConfiguration_RetentionType = 0
	ReaderGroupConfiguration_MANUAL    ReaderGroupConfiguration_RetentionType = 1
	ReaderGroupConfiguration_AUTOMATIC ReaderGroupConfiguration_RetentionType = 2
)

// Enum value maps for ReaderGroupConfiguration_RetentionType.
var (
	ReaderGroupConfiguration_RetentionType_name = map[int32]string{
		0: "NONE",
		1: "MANUAL",
		2: "AUTOMATIC",
	}
	ReaderGroupConfiguration_RetentionType_value = map[string]int32{
		"NONE":      0,
		"MANUAL":    1,
		"AUTOMATIC": 2,
	}
)

func (x ReaderGroupConfiguration_RetentionType) Enum() *ReaderGroupConfiguration_RetentionType {
	p := new(ReaderGroupConfiguration_RetentionType)
	*p = x
	return p
}

func (x ReaderGroupConfiguration_RetentionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReaderGroupConfiguration_RetentionType) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[0].Descriptor()
}

func (ReaderGroupConfiguration_RetentionType) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[0]
}

func (x ReaderGroupConfiguration_RetentionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReaderGroupConfiguration_RetentionType.Descriptor instead.
func (ReaderGroupConfiguration_RetentionType) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{2, 0}
}

type ReaderGroupConfigResponse_Status int32

const (
	ReaderGroupConfigResponse_SUCCESS      ReaderGroupConfigResponse_Status = 0
	ReaderGroupConfigResponse_FAILURE      ReaderGroupConfigResponse_Status = 1
	ReaderGroupConfigResponse_RG_NOT_FOUND ReaderGroupConfigResponse_Status = 2
)

// Enum value maps for ReaderGroupConfigResponse_Status.
var (
	ReaderGroupConfigResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "RG_NOT_FOUND",
	}
	ReaderGroupConfigResponse_Status_value = map[string]int32{
		"SUCCESS":      0,
		"FAILURE":      1,
		"RG_NOT_FOUND": 2,
	}
)

func (x ReaderGroupConfigResponse_Status) Enum() *ReaderGroupConfigResponse_Status {
	p := new(ReaderGroupConfigResponse_Status)
	*p = x
	return p
}

func (x ReaderGroupConfigResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReaderGroupConfigResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[1].Descriptor()
}

func (ReaderGroupConfigResponse_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[1]
}

func (x ReaderGroupConfigResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReaderGroupConfigResponse_Status.Descriptor instead.
func (ReaderGroupConfigResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{3, 0}
}

type CreateReaderGroupResponse_Status int32

const (
	CreateReaderGroupResponse_SUCCESS         CreateReaderGroupResponse_Status = 0
	CreateReaderGroupResponse_FAILURE         CreateReaderGroupResponse_Status = 1
	CreateReaderGroupResponse_SCOPE_NOT_FOUND CreateReaderGroupResponse_Status = 2
	CreateReaderGroupResponse_INVALID_RG_NAME CreateReaderGroupResponse_Status = 3
)

// Enum value maps for CreateReaderGroupResponse_Status.
var (
	CreateReaderGroupResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "SCOPE_NOT_FOUND",
		3: "INVALID_RG_NAME",
	}
	CreateReaderGroupResponse_Status_value = map[string]int32{
		"SUCCESS":         0,
		"FAILURE":         1,
		"SCOPE_NOT_FOUND": 2,
		"INVALID_RG_NAME": 3,
	}
)

func (x CreateReaderGroupResponse_Status) Enum() *CreateReaderGroupResponse_Status {
	p := new(CreateReaderGroupResponse_Status)
	*p = x
	return p
}

func (x CreateReaderGroupResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateReaderGroupResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[2].Descriptor()
}

func (CreateReaderGroupResponse_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[2]
}

func (x CreateReaderGroupResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateReaderGroupResponse_Status.Descriptor instead.
func (CreateReaderGroupResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{5, 0}
}

type DeleteReaderGroupStatus_Status int32

const (
	DeleteReaderGroupStatus_SUCCESS      DeleteReaderGroupStatus_Status = 0
	DeleteReaderGroupStatus_FAILURE      DeleteReaderGroupStatus_Status = 1
	DeleteReaderGroupStatus_RG_NOT_FOUND DeleteReaderGroupStatus_Status = 2
)

// Enum value maps for DeleteReaderGroupStatus_Status.
var (
	DeleteReaderGroupStatus_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "RG_NOT_FOUND",
	}
	DeleteReaderGroupStatus_Status_value = map[string]int32{
		"SUCCESS":      0,
		"FAILURE":      1,
		"RG_NOT_FOUND": 2,
	}
)

func (x DeleteReaderGroupStatus_Status) Enum() *DeleteReaderGroupStatus_Status {
	p := new(DeleteReaderGroupStatus_Status)
	*p = x
	return p
}

func (x DeleteReaderGroupStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteReaderGroupStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[3].Descriptor()
}

func (DeleteReaderGroupStatus_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[3]
}

func (x DeleteReaderGroupStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteReaderGroupStatus_Status.Descriptor instead.
func (DeleteReaderGroupStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{6, 0}
}

type UpdateReaderGroupResponse_Status int32

const (
	UpdateReaderGroupResponse_SUCCESS        UpdateReaderGroupResponse_Status = 0
	UpdateReaderGroupResponse_FAILURE        UpdateReaderGroupResponse_Status = 1
	UpdateReaderGroupResponse_RG_NOT_FOUND   UpdateReaderGroupResponse_Status = 2
	UpdateReaderGroupResponse_INVALID_CONFIG UpdateReaderGroupResponse_Status = 3
)

// Enum value maps for UpdateReaderGroupResponse_Status.
var (
	UpdateReaderGroupResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "RG_NOT_FOUND",
		3: "INVALID_CONFIG",
	}
	UpdateReaderGroupResponse_Status_value = map[string]int32{
		"SUCCESS":        0,
		"FAILURE":        1,
		"RG_NOT_FOUND":   2,
		"INVALID_CONFIG": 3,
	}
)

func (x UpdateReaderGroupResponse_Status) Enum() *UpdateReaderGroupResponse_Status {
	p := new(UpdateReaderGroupResponse_Status)
	*p = x
	return p
}

func (x UpdateReaderGroupResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateReaderGroupResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[4].Descriptor()
}

func (UpdateReaderGroupResponse_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[4]
}

func (x UpdateReaderGroupResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateReaderGroupResponse_Status.Descriptor instead.
func (UpdateReaderGroupResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{7, 0}
}

type CreateKeyValueTableStatus_Status int32

const (
	CreateKeyValueTableStatus_SUCCESS            CreateKeyValueTableStatus_Status = 0
	CreateKeyValueTableStatus_FAILURE            CreateKeyValueTableStatus_Status = 1
	CreateKeyValueTableStatus_TABLE_EXISTS       CreateKeyValueTableStatus_Status = 2
	CreateKeyValueTableStatus_SCOPE_NOT_FOUND    CreateKeyValueTableStatus_Status = 3
	CreateKeyValueTableStatus_INVALID_TABLE_NAME CreateKeyValueTableStatus_Status = 4
)

// Enum value maps for CreateKeyValueTableStatus_Status.
var (
	CreateKeyValueTableStatus_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "TABLE_EXISTS",
		3: "SCOPE_NOT_FOUND",
		4: "INVALID_TABLE_NAME",
	}
	CreateKeyValueTableStatus_Status_value = map[string]int32{
		"SUCCESS":            0,
		"FAILURE":            1,
		"TABLE_EXISTS":       2,
		"SCOPE_NOT_FOUND":    3,
		"INVALID_TABLE_NAME": 4,
	}
)

func (x CreateKeyValueTableStatus_Status) Enum() *CreateKeyValueTableStatus_Status {
	p := new(CreateKeyValueTableStatus_Status)
	*p = x
	return p
}

func (x CreateKeyValueTableStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateKeyValueTableStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[5].Descriptor()
}

func (CreateKeyValueTableStatus_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[5]
}

func (x CreateKeyValueTableStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateKeyValueTableStatus_Status.Descriptor instead.
func (CreateKeyValueTableStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{8, 0}
}

type KeyValueTableConfigResponse_Status int32

const (
	KeyValueTableConfigResponse_SUCCESS         KeyValueTableConfigResponse_Status = 0
	KeyValueTableConfigResponse_FAILURE         KeyValueTableConfigResponse_Status = 1
	KeyValueTableConfigResponse_TABLE_NOT_FOUND KeyValueTableConfigResponse_Status = 2
)

// Enum value maps for KeyValueTableConfigResponse_Status.
var (
	KeyValueTableConfigResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "TABLE_NOT_FOUND",
	}
	KeyValueTableConfigResponse_Status_value = map[string]int32{
		"SUCCESS":         0,
		"FAILURE":         1,
		"TABLE_NOT_FOUND": 2,
	}
)

func (x KeyValueTableConfigResponse_Status) Enum() *KeyValueTableConfigResponse_Status {
	p := new(KeyValueTableConfigResponse_Status)
	*p = x
	return p
}

func (x KeyValueTableConfigResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyValueTableConfigResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[6].Descriptor()
}

func (KeyValueTableConfigResponse_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[6]
}

func (x KeyValueTableConfigResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyValueTableConfigResponse_Status.Descriptor instead.
func (KeyValueTableConfigResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{10, 0}
}

type KVTablesInScopeResponse_Status int32

const (
	KVTablesInScopeResponse_SUCCESS         KVTablesInScopeResponse_Status = 0
	KVTablesInScopeResponse_FAILURE         KVTablesInScopeResponse_Status = 1
	KVTablesInScopeResponse_SCOPE_NOT_FOUND KVTablesInScopeResponse_Status = 2
)

// Enum value maps for KVTablesInScopeResponse_Status.
var (
	KVTablesInScopeResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "SCOPE_NOT_FOUND",
	}
	KVTablesInScopeResponse_Status_value = map[string]int32{
		"SUCCESS":         0,
		"FAILURE":         1,
		"SCOPE_NOT_FOUND": 2,
	}
)

func (x KVTablesInScopeResponse_Status) Enum() *KVTablesInScopeResponse_Status {
	p := new(KVTablesInScopeResponse_Status)
	*p = x
	return p
}

func (x KVTablesInScopeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KVTablesInScopeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[7].Descriptor()
}

func (KVTablesInScopeResponse_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[7]
}

func (x KVTablesInScopeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KVTablesInScopeResponse_Status.Descriptor instead.
func (KVTablesInScopeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{13, 0}
}

type DeleteKVTableStatus_Status int32

const (
	DeleteKVTableStatus_SUCCESS         DeleteKVTableStatus_Status = 0
	DeleteKVTableStatus_FAILURE         DeleteKVTableStatus_Status = 1
	DeleteKVTableStatus_TABLE_NOT_FOUND DeleteKVTableStatus_Status = 2
)

// Enum value maps for DeleteKVTableStatus_Status.
var (
	DeleteKVTableStatus_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "TABLE_NOT_FOUND",
	}
	DeleteKVTableStatus_Status_value = map[string]int32{
		"SUCCESS":         0,
		"FAILURE":         1,
		"TABLE_NOT_FOUND": 2,
	}
)

func (x DeleteKVTableStatus_Status) Enum() *DeleteKVTableStatus_Status {
	p := new(DeleteKVTableStatus_Status)
	*p = x
	return p
}

func (x DeleteKVTableStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteKVTableStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[8].Descriptor()
}

func (DeleteKVTableStatus_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[8]
}

func (x DeleteKVTableStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteKVTableStatus_Status.Descriptor instead.
func (DeleteKVTableStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{14, 0}
}

type CreateStreamStatus_Status int32

const (
	CreateStreamStatus_SUCCESS             CreateStreamStatus_Status = 0
	CreateStreamStatus_FAILURE             CreateStreamStatus_Status = 1
	CreateStreamStatus_STREAM_EXISTS       CreateStreamStatus_Status = 2
	CreateStreamStatus_SCOPE_NOT_FOUND     CreateStreamStatus_Status = 3
	CreateStreamStatus_INVALID_STREAM_NAME CreateStreamStatus_Status = 4
)

// Enum value maps for CreateStreamStatus_Status.
var (
	CreateStreamStatus_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "STREAM_EXISTS",
		3: "SCOPE_NOT_FOUND",
		4: "INVALID_STREAM_NAME",
	}
	CreateStreamStatus_Status_value = map[string]int32{
		"SUCCESS":             0,
		"FAILURE":             1,
		"STREAM_EXISTS":       2,
		"SCOPE_NOT_FOUND":     3,
		"INVALID_STREAM_NAME": 4,
	}
)

func (x CreateStreamStatus_Status) Enum() *CreateStreamStatus_Status {
	p := new(CreateStreamStatus_Status)
	*p = x
	return p
}

func (x CreateStreamStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateStreamStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[9].Descriptor()
}

func (CreateStreamStatus_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[9]
}

func (x CreateStreamStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateStreamStatus_Status.Descriptor instead.
func (CreateStreamStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{15, 0}
}

type UpdateStreamStatus_Status int32

const (
	UpdateStreamStatus_SUCCESS          UpdateStreamStatus_Status = 0
	UpdateStreamStatus_FAILURE          UpdateStreamStatus_Status = 1
	UpdateStreamStatus_STREAM_NOT_FOUND UpdateStreamStatus_Status = 2
	UpdateStreamStatus_SCOPE_NOT_FOUND  UpdateStreamStatus_Status = 3
	UpdateStreamStatus_STREAM_SEALED    UpdateStreamStatus_Status = 4
)

// Enum value maps for UpdateStreamStatus_Status.
var (
	UpdateStreamStatus_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "STREAM_NOT_FOUND",
		3: "SCOPE_NOT_FOUND",
		4: "STREAM_SEALED",
	}
	UpdateStreamStatus_Status_value = map[string]int32{
		"SUCCESS":          0,
		"FAILURE":          1,
		"STREAM_NOT_FOUND": 2,
		"SCOPE_NOT_FOUND":  3,
		"STREAM_SEALED":    4,
	}
)

func (x UpdateStreamStatus_Status) Enum() *UpdateStreamStatus_Status {
	p := new(UpdateStreamStatus_Status)
	*p = x
	return p
}

func (x UpdateStreamStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateStreamStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[10].Descriptor()
}

func (UpdateStreamStatus_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[10]
}

func (x UpdateStreamStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateStreamStatus_Status.Descriptor instead.
func (UpdateStreamStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{16, 0}
}

type UpdateSubscriberStatus_Status int32

const (
	UpdateSubscriberStatus_SUCCESS              UpdateSubscriberStatus_Status = 0
	UpdateSubscriberStatus_FAILURE              UpdateSubscriberStatus_Status = 1
	UpdateSubscriberStatus_STREAM_NOT_FOUND     UpdateSubscriberStatus_Status = 2
	UpdateSubscriberStatus_SUBSCRIBER_NOT_FOUND UpdateSubscriberStatus_Status = 3
	UpdateSubscriberStatus_STREAM_CUT_NOT_VALID UpdateSubscriberStatus_Status = 4
	UpdateSubscriberStatus_GENERATION_MISMATCH  UpdateSubscriberStatus_Status = 5
)

// Enum value maps for UpdateSubscriberStatus_Status.
var (
	UpdateSubscriberStatus_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "STREAM_NOT_FOUND",
		3: "SUBSCRIBER_NOT_FOUND",
		4: "STREAM_CUT_NOT_VALID",
		5: "GENERATION_MISMATCH",
	}
	UpdateSubscriberStatus_Status_value = map[string]int32{
		"SUCCESS":              0,
		"FAILURE":              1,
		"STREAM_NOT_FOUND":     2,
		"SUBSCRIBER_NOT_FOUND": 3,
		"STREAM_CUT_NOT_VALID": 4,
		"GENERATION_MISMATCH":  5,
	}
)

func (x UpdateSubscriberStatus_Status) Enum() *UpdateSubscriberStatus_Status {
	p := new(UpdateSubscriberStatus_Status)
	*p = x
	return p
}

func (x UpdateSubscriberStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateSubscriberStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[11].Descriptor()
}

func (UpdateSubscriberStatus_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[11]
}

func (x UpdateSubscriberStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateSubscriberStatus_Status.Descriptor instead.
func (UpdateSubscriberStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{17, 0}
}

type SubscribersResponse_Status int32

const (
	SubscribersResponse_SUCCESS          SubscribersResponse_Status = 0
	SubscribersResponse_FAILURE          SubscribersResponse_Status = 1
	SubscribersResponse_STREAM_NOT_FOUND SubscribersResponse_Status = 2
)

// Enum value maps for SubscribersResponse_Status.
var (
	SubscribersResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "STREAM_NOT_FOUND",
	}
	SubscribersResponse_Status_value = map[string]int32{
		"SUCCESS":          0,
		"FAILURE":          1,
		"STREAM_NOT_FOUND": 2,
	}
)

func (x SubscribersResponse_Status) Enum() *SubscribersResponse_Status {
	p := new(SubscribersResponse_Status)
	*p = x
	return p
}

func (x SubscribersResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscribersResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[12].Descriptor()
}

func (SubscribersResponse_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[12]
}

func (x SubscribersResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscribersResponse_Status.Descriptor instead.
func (SubscribersResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{20, 0}
}

type DeleteStreamStatus_Status int32

const (
	DeleteStreamStatus_SUCCESS           DeleteStreamStatus_Status = 0
	DeleteStreamStatus_FAILURE           DeleteStreamStatus_Status = 1
	DeleteStreamStatus_STREAM_NOT_FOUND  DeleteStreamStatus_Status = 2
	DeleteStreamStatus_STREAM_NOT_SEALED DeleteStreamStatus_Status = 3
)

// Enum value maps for DeleteStreamStatus_Status.
var (
	DeleteStreamStatus_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "STREAM_NOT_FOUND",
		3: "STREAM_NOT_SEALED",
	}
	DeleteStreamStatus_Status_value = map[string]int32{
		"SUCCESS":           0,
		"FAILURE":           1,
		"STREAM_NOT_FOUND":  2,
		"STREAM_NOT_SEALED": 3,
	}
)

func (x DeleteStreamStatus_Status) Enum() *DeleteStreamStatus_Status {
	p := new(DeleteStreamStatus_Status)
	*p = x
	return p
}

func (x DeleteStreamStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteStreamStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[13].Descriptor()
}

func (DeleteStreamStatus_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[13]
}

func (x DeleteStreamStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteStreamStatus_Status.Descriptor instead.
func (DeleteStreamStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{21, 0}
}

type CreateScopeStatus_Status int32

const (
	CreateScopeStatus_SUCCESS            CreateScopeStatus_Status = 0
	CreateScopeStatus_FAILURE            CreateScopeStatus_Status = 1
	CreateScopeStatus_SCOPE_EXISTS       CreateScopeStatus_Status = 2
	CreateScopeStatus_INVALID_SCOPE_NAME CreateScopeStatus_Status = 3
)

// Enum value maps for CreateScopeStatus_Status.
var (
	CreateScopeStatus_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "SCOPE_EXISTS",
		3: "INVALID_SCOPE_NAME",
	}
	CreateScopeStatus_Status_value = map[string]int32{
		"SUCCESS":            0,
		"FAILURE":            1,
		"SCOPE_EXISTS":       2,
		"INVALID_SCOPE_NAME": 3,
	}
)

func (x CreateScopeStatus_Status) Enum() *CreateScopeStatus_Status {
	p := new(CreateScopeStatus_Status)
	*p = x
	return p
}

func (x CreateScopeStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateScopeStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[14].Descriptor()
}

func (CreateScopeStatus_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[14]
}

func (x CreateScopeStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateScopeStatus_Status.Descriptor instead.
func (CreateScopeStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{22, 0}
}

type DeleteScopeStatus_Status int32

const (
	DeleteScopeStatus_SUCCESS         DeleteScopeStatus_Status = 0
	DeleteScopeStatus_FAILURE         DeleteScopeStatus_Status = 1
	DeleteScopeStatus_SCOPE_NOT_FOUND DeleteScopeStatus_Status = 2
	DeleteScopeStatus_SCOPE_NOT_EMPTY DeleteScopeStatus_Status = 3
)

// Enum value maps for DeleteScopeStatus_Status.
var (
	DeleteScopeStatus_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "SCOPE_NOT_FOUND",
		3: "SCOPE_NOT_EMPTY",
	}
	DeleteScopeStatus_Status_value = map[string]int32{
		"SUCCESS":         0,
		"FAILURE":         1,
		"SCOPE_NOT_FOUND": 2,
		"SCOPE_NOT_EMPTY": 3,
	}
)

func (x DeleteScopeStatus_Status) Enum() *DeleteScopeStatus_Status {
	p := new(DeleteScopeStatus_Status)
	*p = x
	return p
}

func (x DeleteScopeStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteScopeStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[15].Descriptor()
}

func (DeleteScopeStatus_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[15]
}

func (x DeleteScopeStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteScopeStatus_Status.Descriptor instead.
func (DeleteScopeStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{23, 0}
}

type TxnStatus_Status int32

const (
	TxnStatus_SUCCESS               TxnStatus_Status = 0
	TxnStatus_FAILURE               TxnStatus_Status = 1
	TxnStatus_STREAM_NOT_FOUND      TxnStatus_Status = 2
	TxnStatus_TRANSACTION_NOT_FOUND TxnStatus_Status = 3
)

// Enum value maps for TxnStatus_Status.
var (
	TxnStatus_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "STREAM_NOT_FOUND",
		3: "TRANSACTION_NOT_FOUND",
	}
	TxnStatus_Status_value = map[string]int32{
		"SUCCESS":               0,
		"FAILURE":               1,
		"STREAM_NOT_FOUND":      2,
		"TRANSACTION_NOT_FOUND": 3,
	}
)

func (x TxnStatus_Status) Enum() *TxnStatus_Status {
	p := new(TxnStatus_Status)
	*p = x
	return p
}

func (x TxnStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxnStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[16].Descriptor()
}

func (TxnStatus_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[16]
}

func (x TxnStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxnStatus_Status.Descriptor instead.
func (TxnStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{24, 0}
}

type PingTxnStatus_Status int32

const (
	PingTxnStatus_OK                          PingTxnStatus_Status = 0
	PingTxnStatus_LEASE_TOO_LARGE             PingTxnStatus_Status = 1
	PingTxnStatus_MAX_EXECUTION_TIME_EXCEEDED PingTxnStatus_Status = 2
	// Deprecated: Do not use.
	PingTxnStatus_SCALE_GRACE_TIME_EXCEEDED PingTxnStatus_Status = 3
	PingTxnStatus_DISCONNECTED              PingTxnStatus_Status = 4
	PingTxnStatus_COMMITTED                 PingTxnStatus_Status = 5
	PingTxnStatus_ABORTED                   PingTxnStatus_Status = 6
	PingTxnStatus_UNKNOWN                   PingTxnStatus_Status = 7
)

// Enum value maps for PingTxnStatus_Status.
var (
	PingTxnStatus_Status_name = map[int32]string{
		0: "OK",
		1: "LEASE_TOO_LARGE",
		2: "MAX_EXECUTION_TIME_EXCEEDED",
		3: "SCALE_GRACE_TIME_EXCEEDED",
		4: "DISCONNECTED",
		5: "COMMITTED",
		6: "ABORTED",
		7: "UNKNOWN",
	}
	PingTxnStatus_Status_value = map[string]int32{
		"OK":                          0,
		"LEASE_TOO_LARGE":             1,
		"MAX_EXECUTION_TIME_EXCEEDED": 2,
		"SCALE_GRACE_TIME_EXCEEDED":   3,
		"DISCONNECTED":                4,
		"COMMITTED":                   5,
		"ABORTED":                     6,
		"UNKNOWN":                     7,
	}
)

func (x PingTxnStatus_Status) Enum() *PingTxnStatus_Status {
	p := new(PingTxnStatus_Status)
	*p = x
	return p
}

func (x PingTxnStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PingTxnStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[17].Descriptor()
}

func (PingTxnStatus_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[17]
}

func (x PingTxnStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PingTxnStatus_Status.Descriptor instead.
func (PingTxnStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{25, 0}
}

type TxnState_State int32

const (
	TxnState_UNKNOWN    TxnState_State = 0
	TxnState_OPEN       TxnState_State = 1
	TxnState_COMMITTING TxnState_State = 2
	TxnState_COMMITTED  TxnState_State = 3
	TxnState_ABORTING   TxnState_State = 4
	TxnState_ABORTED    TxnState_State = 5
)

// Enum value maps for TxnState_State.
var (
	TxnState_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "OPEN",
		2: "COMMITTING",
		3: "COMMITTED",
		4: "ABORTING",
		5: "ABORTED",
	}
	TxnState_State_value = map[string]int32{
		"UNKNOWN":    0,
		"OPEN":       1,
		"COMMITTING": 2,
		"COMMITTED":  3,
		"ABORTING":   4,
		"ABORTED":    5,
	}
)

func (x TxnState_State) Enum() *TxnState_State {
	p := new(TxnState_State)
	*p = x
	return p
}

func (x TxnState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxnState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[18].Descriptor()
}

func (TxnState_State) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[18]
}

func (x TxnState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxnState_State.Descriptor instead.
func (TxnState_State) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{26, 0}
}

type StreamsInScopeResponse_Status int32

const (
	StreamsInScopeResponse_SUCCESS         StreamsInScopeResponse_Status = 0
	StreamsInScopeResponse_FAILURE         StreamsInScopeResponse_Status = 1
	StreamsInScopeResponse_SCOPE_NOT_FOUND StreamsInScopeResponse_Status = 2
)

// Enum value maps for StreamsInScopeResponse_Status.
var (
	StreamsInScopeResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "SCOPE_NOT_FOUND",
	}
	StreamsInScopeResponse_Status_value = map[string]int32{
		"SUCCESS":         0,
		"FAILURE":         1,
		"SCOPE_NOT_FOUND": 2,
	}
)

func (x StreamsInScopeResponse_Status) Enum() *StreamsInScopeResponse_Status {
	p := new(StreamsInScopeResponse_Status)
	*p = x
	return p
}

func (x StreamsInScopeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamsInScopeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[19].Descriptor()
}

func (StreamsInScopeResponse_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[19]
}

func (x StreamsInScopeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamsInScopeResponse_Status.Descriptor instead.
func (StreamsInScopeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{31, 0}
}

type StreamInfo_AccessOperation int32

const (
	StreamInfo_UNSPECIFIED StreamInfo_AccessOperation = 0
	StreamInfo_NONE        StreamInfo_AccessOperation = 1
	StreamInfo_ANY         StreamInfo_AccessOperation = 2
	StreamInfo_READ        StreamInfo_AccessOperation = 3
	StreamInfo_WRITE       StreamInfo_AccessOperation = 4
	StreamInfo_READ_WRITE  StreamInfo_AccessOperation = 5
)

// Enum value maps for StreamInfo_AccessOperation.
var (
	StreamInfo_AccessOperation_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NONE",
		2: "ANY",
		3: "READ",
		4: "WRITE",
		5: "READ_WRITE",
	}
	StreamInfo_AccessOperation_value = map[string]int32{
		"UNSPECIFIED": 0,
		"NONE":        1,
		"ANY":         2,
		"READ":        3,
		"WRITE":       4,
		"READ_WRITE":  5,
	}
)

func (x StreamInfo_AccessOperation) Enum() *StreamInfo_AccessOperation {
	p := new(StreamInfo_AccessOperation)
	*p = x
	return p
}

func (x StreamInfo_AccessOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamInfo_AccessOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[20].Descriptor()
}

func (StreamInfo_AccessOperation) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[20]
}

func (x StreamInfo_AccessOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamInfo_AccessOperation.Descriptor instead.
func (StreamInfo_AccessOperation) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{32, 0}
}

type ScalingPolicy_ScalingPolicyType int32

const (
	ScalingPolicy_FIXED_NUM_SEGMENTS        ScalingPolicy_ScalingPolicyType = 0
	ScalingPolicy_BY_RATE_IN_KBYTES_PER_SEC ScalingPolicy_ScalingPolicyType = 1
	ScalingPolicy_BY_RATE_IN_EVENTS_PER_SEC ScalingPolicy_ScalingPolicyType = 2
)

// Enum value maps for ScalingPolicy_ScalingPolicyType.
var (
	ScalingPolicy_ScalingPolicyType_name = map[int32]string{
		0: "FIXED_NUM_SEGMENTS",
		1: "BY_RATE_IN_KBYTES_PER_SEC",
		2: "BY_RATE_IN_EVENTS_PER_SEC",
	}
	ScalingPolicy_ScalingPolicyType_value = map[string]int32{
		"FIXED_NUM_SEGMENTS":        0,
		"BY_RATE_IN_KBYTES_PER_SEC": 1,
		"BY_RATE_IN_EVENTS_PER_SEC": 2,
	}
)

func (x ScalingPolicy_ScalingPolicyType) Enum() *ScalingPolicy_ScalingPolicyType {
	p := new(ScalingPolicy_ScalingPolicyType)
	*p = x
	return p
}

func (x ScalingPolicy_ScalingPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScalingPolicy_ScalingPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[21].Descriptor()
}

func (ScalingPolicy_ScalingPolicyType) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[21]
}

func (x ScalingPolicy_ScalingPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScalingPolicy_ScalingPolicyType.Descriptor instead.
func (ScalingPolicy_ScalingPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{33, 0}
}

type RetentionPolicy_RetentionPolicyType int32

const (
	RetentionPolicy_UNKNOWN RetentionPolicy_RetentionPolicyType = 0
	RetentionPolicy_TIME    RetentionPolicy_RetentionPolicyType = 1
	RetentionPolicy_SIZE    RetentionPolicy_RetentionPolicyType = 2
)

// Enum value maps for RetentionPolicy_RetentionPolicyType.
var (
	RetentionPolicy_RetentionPolicyType_name = map[int32]string{
		0: "UNKNOWN",
		1: "TIME",
		2: "SIZE",
	}
	RetentionPolicy_RetentionPolicyType_value = map[string]int32{
		"UNKNOWN": 0,
		"TIME":    1,
		"SIZE":    2,
	}
)

func (x RetentionPolicy_RetentionPolicyType) Enum() *RetentionPolicy_RetentionPolicyType {
	p := new(RetentionPolicy_RetentionPolicyType)
	*p = x
	return p
}

func (x RetentionPolicy_RetentionPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetentionPolicy_RetentionPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[22].Descriptor()
}

func (RetentionPolicy_RetentionPolicyType) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[22]
}

func (x RetentionPolicy_RetentionPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RetentionPolicy_RetentionPolicyType.Descriptor instead.
func (RetentionPolicy_RetentionPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{34, 0}
}

type ScaleResponse_ScaleStreamStatus int32

const (
	ScaleResponse_STARTED             ScaleResponse_ScaleStreamStatus = 0
	ScaleResponse_FAILURE             ScaleResponse_ScaleStreamStatus = 1
	ScaleResponse_PRECONDITION_FAILED ScaleResponse_ScaleStreamStatus = 2
)

// Enum value maps for ScaleResponse_ScaleStreamStatus.
var (
	ScaleResponse_ScaleStreamStatus_name = map[int32]string{
		0: "STARTED",
		1: "FAILURE",
		2: "PRECONDITION_FAILED",
	}
	ScaleResponse_ScaleStreamStatus_value = map[string]int32{
		"STARTED":             0,
		"FAILURE":             1,
		"PRECONDITION_FAILED": 2,
	}
)

func (x ScaleResponse_ScaleStreamStatus) Enum() *ScaleResponse_ScaleStreamStatus {
	p := new(ScaleResponse_ScaleStreamStatus)
	*p = x
	return p
}

func (x ScaleResponse_ScaleStreamStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScaleResponse_ScaleStreamStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[23].Descriptor()
}

func (ScaleResponse_ScaleStreamStatus) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[23]
}

func (x ScaleResponse_ScaleStreamStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScaleResponse_ScaleStreamStatus.Descriptor instead.
func (ScaleResponse_ScaleStreamStatus) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{51, 0}
}

type ScaleStatusResponse_ScaleStatus int32

const (
	ScaleStatusResponse_IN_PROGRESS    ScaleStatusResponse_ScaleStatus = 0
	ScaleStatusResponse_SUCCESS        ScaleStatusResponse_ScaleStatus = 1
	ScaleStatusResponse_INVALID_INPUT  ScaleStatusResponse_ScaleStatus = 2
	ScaleStatusResponse_INTERNAL_ERROR ScaleStatusResponse_ScaleStatus = 3
)

// Enum value maps for ScaleStatusResponse_ScaleStatus.
var (
	ScaleStatusResponse_ScaleStatus_name = map[int32]string{
		0: "IN_PROGRESS",
		1: "SUCCESS",
		2: "INVALID_INPUT",
		3: "INTERNAL_ERROR",
	}
	ScaleStatusResponse_ScaleStatus_value = map[string]int32{
		"IN_PROGRESS":    0,
		"SUCCESS":        1,
		"INVALID_INPUT":  2,
		"INTERNAL_ERROR": 3,
	}
)

func (x ScaleStatusResponse_ScaleStatus) Enum() *ScaleStatusResponse_ScaleStatus {
	p := new(ScaleStatusResponse_ScaleStatus)
	*p = x
	return p
}

func (x ScaleStatusResponse_ScaleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScaleStatusResponse_ScaleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[24].Descriptor()
}

func (ScaleStatusResponse_ScaleStatus) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[24]
}

func (x ScaleStatusResponse_ScaleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScaleStatusResponse_ScaleStatus.Descriptor instead.
func (ScaleStatusResponse_ScaleStatus) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{53, 0}
}

type RemoveWriterResponse_Status int32

const (
	RemoveWriterResponse_SUCCESS               RemoveWriterResponse_Status = 0
	RemoveWriterResponse_UNKNOWN_WRITER        RemoveWriterResponse_Status = 1
	RemoveWriterResponse_STREAM_DOES_NOT_EXIST RemoveWriterResponse_Status = 2
	RemoveWriterResponse_INTERNAL_ERROR        RemoveWriterResponse_Status = 3
)

// Enum value maps for RemoveWriterResponse_Status.
var (
	RemoveWriterResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "UNKNOWN_WRITER",
		2: "STREAM_DOES_NOT_EXIST",
		3: "INTERNAL_ERROR",
	}
	RemoveWriterResponse_Status_value = map[string]int32{
		"SUCCESS":               0,
		"UNKNOWN_WRITER":        1,
		"STREAM_DOES_NOT_EXIST": 2,
		"INTERNAL_ERROR":        3,
	}
)

func (x RemoveWriterResponse_Status) Enum() *RemoveWriterResponse_Status {
	p := new(RemoveWriterResponse_Status)
	*p = x
	return p
}

func (x RemoveWriterResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveWriterResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[25].Descriptor()
}

func (RemoveWriterResponse_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[25]
}

func (x RemoveWriterResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveWriterResponse_Status.Descriptor instead.
func (RemoveWriterResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{61, 0}
}

type TimestampResponse_Status int32

const (
	TimestampResponse_SUCCESS          TimestampResponse_Status = 0
	TimestampResponse_INVALID_TIME     TimestampResponse_Status = 1
	TimestampResponse_INVALID_POSITION TimestampResponse_Status = 2
	TimestampResponse_INTERNAL_ERROR   TimestampResponse_Status = 3
)

// Enum value maps for TimestampResponse_Status.
var (
	TimestampResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "INVALID_TIME",
		2: "INVALID_POSITION",
		3: "INTERNAL_ERROR",
	}
	TimestampResponse_Status_value = map[string]int32{
		"SUCCESS":          0,
		"INVALID_TIME":     1,
		"INVALID_POSITION": 2,
		"INTERNAL_ERROR":   3,
	}
)

func (x TimestampResponse_Status) Enum() *TimestampResponse_Status {
	p := new(TimestampResponse_Status)
	*p = x
	return p
}

func (x TimestampResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimestampResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_client_proto_Controller_proto_enumTypes[26].Descriptor()
}

func (TimestampResponse_Status) Type() protoreflect.EnumType {
	return &file_controller_client_proto_Controller_proto_enumTypes[26]
}

func (x TimestampResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimestampResponse_Status.Descriptor instead.
func (TimestampResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{63, 0}
}

type ServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerRequest) Reset() {
	*x = ServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerRequest) ProtoMessage() {}

func (x *ServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerRequest.ProtoReflect.Descriptor instead.
func (*ServerRequest) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{0}
}

type ServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeURI []*NodeUri `protobuf:"bytes,1,rep,name=nodeURI,proto3" json:"nodeURI,omitempty"`
}

func (x *ServerResponse) Reset() {
	*x = ServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerResponse) ProtoMessage() {}

func (x *ServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerResponse.ProtoReflect.Descriptor instead.
func (*ServerResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{1}
}

func (x *ServerResponse) GetNodeURI() []*NodeUri {
	if x != nil {
		return x.NodeURI
	}
	return nil
}

type ReaderGroupConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope                             string       `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ReaderGroupName                   string       `protobuf:"bytes,2,opt,name=readerGroupName,proto3" json:"readerGroupName,omitempty"`
	GroupRefreshTimeMillis            int64        `protobuf:"varint,3,opt,name=groupRefreshTimeMillis,proto3" json:"groupRefreshTimeMillis,omitempty"`
	AutomaticCheckpointIntervalMillis int64        `protobuf:"varint,4,opt,name=automaticCheckpointIntervalMillis,proto3" json:"automaticCheckpointIntervalMillis,omitempty"`
	MaxOutstandingCheckpointRequest   int32        `protobuf:"varint,5,opt,name=maxOutstandingCheckpointRequest,proto3" json:"maxOutstandingCheckpointRequest,omitempty"`
	RetentionType                     int32        `protobuf:"varint,6,opt,name=retentionType,proto3" json:"retentionType,omitempty"`
	Generation                        int64        `protobuf:"varint,7,opt,name=generation,proto3" json:"generation,omitempty"`
	ReaderGroupId                     string       `protobuf:"bytes,8,opt,name=readerGroupId,proto3" json:"readerGroupId,omitempty"`
	StartingStreamCuts                []*StreamCut `protobuf:"bytes,9,rep,name=startingStreamCuts,proto3" json:"startingStreamCuts,omitempty"`
	EndingStreamCuts                  []*StreamCut `protobuf:"bytes,10,rep,name=endingStreamCuts,proto3" json:"endingStreamCuts,omitempty"`
	RolloverSizeBytes                 int64        `protobuf:"varint,11,opt,name=rolloverSizeBytes,proto3" json:"rolloverSizeBytes,omitempty"`
}

func (x *ReaderGroupConfiguration) Reset() {
	*x = ReaderGroupConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReaderGroupConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReaderGroupConfiguration) ProtoMessage() {}

func (x *ReaderGroupConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReaderGroupConfiguration.ProtoReflect.Descriptor instead.
func (*ReaderGroupConfiguration) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{2}
}

func (x *ReaderGroupConfiguration) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ReaderGroupConfiguration) GetReaderGroupName() string {
	if x != nil {
		return x.ReaderGroupName
	}
	return ""
}

func (x *ReaderGroupConfiguration) GetGroupRefreshTimeMillis() int64 {
	if x != nil {
		return x.GroupRefreshTimeMillis
	}
	return 0
}

func (x *ReaderGroupConfiguration) GetAutomaticCheckpointIntervalMillis() int64 {
	if x != nil {
		return x.AutomaticCheckpointIntervalMillis
	}
	return 0
}

func (x *ReaderGroupConfiguration) GetMaxOutstandingCheckpointRequest() int32 {
	if x != nil {
		return x.MaxOutstandingCheckpointRequest
	}
	return 0
}

func (x *ReaderGroupConfiguration) GetRetentionType() int32 {
	if x != nil {
		return x.RetentionType
	}
	return 0
}

func (x *ReaderGroupConfiguration) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *ReaderGroupConfiguration) GetReaderGroupId() string {
	if x != nil {
		return x.ReaderGroupId
	}
	return ""
}

func (x *ReaderGroupConfiguration) GetStartingStreamCuts() []*StreamCut {
	if x != nil {
		return x.StartingStreamCuts
	}
	return nil
}

func (x *ReaderGroupConfiguration) GetEndingStreamCuts() []*StreamCut {
	if x != nil {
		return x.EndingStreamCuts
	}
	return nil
}

func (x *ReaderGroupConfiguration) GetRolloverSizeBytes() int64 {
	if x != nil {
		return x.RolloverSizeBytes
	}
	return 0
}

type ReaderGroupConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *ReaderGroupConfiguration        `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Status ReaderGroupConfigResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfigResponse_Status" json:"status,omitempty"`
}

func (x *ReaderGroupConfigResponse) Reset() {
	*x = ReaderGroupConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReaderGroupConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReaderGroupConfigResponse) ProtoMessage() {}

func (x *ReaderGroupConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReaderGroupConfigResponse.ProtoReflect.Descriptor instead.
func (*ReaderGroupConfigResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{3}
}

func (x *ReaderGroupConfigResponse) GetConfig() *ReaderGroupConfiguration {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ReaderGroupConfigResponse) GetStatus() ReaderGroupConfigResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReaderGroupConfigResponse_SUCCESS
}

type ReaderGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope         string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ReaderGroup   string `protobuf:"bytes,2,opt,name=readerGroup,proto3" json:"readerGroup,omitempty"`
	ReaderGroupId string `protobuf:"bytes,3,opt,name=readerGroupId,proto3" json:"readerGroupId,omitempty"`
	Generation    int64  `protobuf:"varint,4,opt,name=generation,proto3" json:"generation,omitempty"`
}

func (x *ReaderGroupInfo) Reset() {
	*x = ReaderGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReaderGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReaderGroupInfo) ProtoMessage() {}

func (x *ReaderGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReaderGroupInfo.ProtoReflect.Descriptor instead.
func (*ReaderGroupInfo) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{4}
}

func (x *ReaderGroupInfo) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ReaderGroupInfo) GetReaderGroup() string {
	if x != nil {
		return x.ReaderGroup
	}
	return ""
}

func (x *ReaderGroupInfo) GetReaderGroupId() string {
	if x != nil {
		return x.ReaderGroupId
	}
	return ""
}

func (x *ReaderGroupInfo) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

type CreateReaderGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status CreateReaderGroupResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.CreateReaderGroupResponse_Status" json:"status,omitempty"`
	Config *ReaderGroupConfiguration        `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CreateReaderGroupResponse) Reset() {
	*x = CreateReaderGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReaderGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReaderGroupResponse) ProtoMessage() {}

func (x *CreateReaderGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReaderGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateReaderGroupResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{5}
}

func (x *CreateReaderGroupResponse) GetStatus() CreateReaderGroupResponse_Status {
	if x != nil {
		return x.Status
	}
	return CreateReaderGroupResponse_SUCCESS
}

func (x *CreateReaderGroupResponse) GetConfig() *ReaderGroupConfiguration {
	if x != nil {
		return x.Config
	}
	return nil
}

type DeleteReaderGroupStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DeleteReaderGroupStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.DeleteReaderGroupStatus_Status" json:"status,omitempty"`
}

func (x *DeleteReaderGroupStatus) Reset() {
	*x = DeleteReaderGroupStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReaderGroupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReaderGroupStatus) ProtoMessage() {}

func (x *DeleteReaderGroupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReaderGroupStatus.ProtoReflect.Descriptor instead.
func (*DeleteReaderGroupStatus) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteReaderGroupStatus) GetStatus() DeleteReaderGroupStatus_Status {
	if x != nil {
		return x.Status
	}
	return DeleteReaderGroupStatus_SUCCESS
}

type UpdateReaderGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     UpdateReaderGroupResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.UpdateReaderGroupResponse_Status" json:"status,omitempty"`
	Generation int64                            `protobuf:"varint,2,opt,name=generation,proto3" json:"generation,omitempty"`
}

func (x *UpdateReaderGroupResponse) Reset() {
	*x = UpdateReaderGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReaderGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReaderGroupResponse) ProtoMessage() {}

func (x *UpdateReaderGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReaderGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateReaderGroupResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateReaderGroupResponse) GetStatus() UpdateReaderGroupResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpdateReaderGroupResponse_SUCCESS
}

func (x *UpdateReaderGroupResponse) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

type CreateKeyValueTableStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status CreateKeyValueTableStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.CreateKeyValueTableStatus_Status" json:"status,omitempty"`
}

func (x *CreateKeyValueTableStatus) Reset() {
	*x = CreateKeyValueTableStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyValueTableStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyValueTableStatus) ProtoMessage() {}

func (x *CreateKeyValueTableStatus) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyValueTableStatus.ProtoReflect.Descriptor instead.
func (*CreateKeyValueTableStatus) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{8}
}

func (x *CreateKeyValueTableStatus) GetStatus() CreateKeyValueTableStatus_Status {
	if x != nil {
		return x.Status
	}
	return CreateKeyValueTableStatus_SUCCESS
}

type KeyValueTableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope              string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	KvtName            string `protobuf:"bytes,2,opt,name=kvtName,proto3" json:"kvtName,omitempty"`
	PartitionCount     int32  `protobuf:"varint,3,opt,name=partitionCount,proto3" json:"partitionCount,omitempty"`
	PrimaryKeyLength   int32  `protobuf:"varint,4,opt,name=primaryKeyLength,proto3" json:"primaryKeyLength,omitempty"`
	SecondaryKeyLength int32  `protobuf:"varint,5,opt,name=secondaryKeyLength,proto3" json:"secondaryKeyLength,omitempty"`
	RolloverSizeBytes  int64  `protobuf:"varint,6,opt,name=rolloverSizeBytes,proto3" json:"rolloverSizeBytes,omitempty"`
}

func (x *KeyValueTableConfig) Reset() {
	*x = KeyValueTableConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValueTableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueTableConfig) ProtoMessage() {}

func (x *KeyValueTableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueTableConfig.ProtoReflect.Descriptor instead.
func (*KeyValueTableConfig) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{9}
}

func (x *KeyValueTableConfig) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *KeyValueTableConfig) GetKvtName() string {
	if x != nil {
		return x.KvtName
	}
	return ""
}

func (x *KeyValueTableConfig) GetPartitionCount() int32 {
	if x != nil {
		return x.PartitionCount
	}
	return 0
}

func (x *KeyValueTableConfig) GetPrimaryKeyLength() int32 {
	if x != nil {
		return x.PrimaryKeyLength
	}
	return 0
}

func (x *KeyValueTableConfig) GetSecondaryKeyLength() int32 {
	if x != nil {
		return x.SecondaryKeyLength
	}
	return 0
}

func (x *KeyValueTableConfig) GetRolloverSizeBytes() int64 {
	if x != nil {
		return x.RolloverSizeBytes
	}
	return 0
}

type KeyValueTableConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *KeyValueTableConfig               `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Status KeyValueTableConfigResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.KeyValueTableConfigResponse_Status" json:"status,omitempty"`
}

func (x *KeyValueTableConfigResponse) Reset() {
	*x = KeyValueTableConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValueTableConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueTableConfigResponse) ProtoMessage() {}

func (x *KeyValueTableConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueTableConfigResponse.ProtoReflect.Descriptor instead.
func (*KeyValueTableConfigResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{10}
}

func (x *KeyValueTableConfigResponse) GetConfig() *KeyValueTableConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *KeyValueTableConfigResponse) GetStatus() KeyValueTableConfigResponse_Status {
	if x != nil {
		return x.Status
	}
	return KeyValueTableConfigResponse_SUCCESS
}

type KeyValueTableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	KvtName string `protobuf:"bytes,2,opt,name=kvtName,proto3" json:"kvtName,omitempty"`
}

func (x *KeyValueTableInfo) Reset() {
	*x = KeyValueTableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValueTableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueTableInfo) ProtoMessage() {}

func (x *KeyValueTableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueTableInfo.ProtoReflect.Descriptor instead.
func (*KeyValueTableInfo) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{11}
}

func (x *KeyValueTableInfo) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *KeyValueTableInfo) GetKvtName() string {
	if x != nil {
		return x.KvtName
	}
	return ""
}

type KVTablesInScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope             *ScopeInfo         `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ContinuationToken *ContinuationToken `protobuf:"bytes,2,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
}

func (x *KVTablesInScopeRequest) Reset() {
	*x = KVTablesInScopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVTablesInScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVTablesInScopeRequest) ProtoMessage() {}

func (x *KVTablesInScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVTablesInScopeRequest.ProtoReflect.Descriptor instead.
func (*KVTablesInScopeRequest) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{12}
}

func (x *KVTablesInScopeRequest) GetScope() *ScopeInfo {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *KVTablesInScopeRequest) GetContinuationToken() *ContinuationToken {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

type KVTablesInScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kvtables          []*KeyValueTableInfo           `protobuf:"bytes,1,rep,name=kvtables,proto3" json:"kvtables,omitempty"`
	ContinuationToken *ContinuationToken             `protobuf:"bytes,2,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
	Status            KVTablesInScopeResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.KVTablesInScopeResponse_Status" json:"status,omitempty"`
}

func (x *KVTablesInScopeResponse) Reset() {
	*x = KVTablesInScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVTablesInScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVTablesInScopeResponse) ProtoMessage() {}

func (x *KVTablesInScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVTablesInScopeResponse.ProtoReflect.Descriptor instead.
func (*KVTablesInScopeResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{13}
}

func (x *KVTablesInScopeResponse) GetKvtables() []*KeyValueTableInfo {
	if x != nil {
		return x.Kvtables
	}
	return nil
}

func (x *KVTablesInScopeResponse) GetContinuationToken() *ContinuationToken {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

func (x *KVTablesInScopeResponse) GetStatus() KVTablesInScopeResponse_Status {
	if x != nil {
		return x.Status
	}
	return KVTablesInScopeResponse_SUCCESS
}

type DeleteKVTableStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DeleteKVTableStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.DeleteKVTableStatus_Status" json:"status,omitempty"`
}

func (x *DeleteKVTableStatus) Reset() {
	*x = DeleteKVTableStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKVTableStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKVTableStatus) ProtoMessage() {}

func (x *DeleteKVTableStatus) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKVTableStatus.ProtoReflect.Descriptor instead.
func (*DeleteKVTableStatus) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteKVTableStatus) GetStatus() DeleteKVTableStatus_Status {
	if x != nil {
		return x.Status
	}
	return DeleteKVTableStatus_SUCCESS
}

type CreateStreamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status CreateStreamStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.CreateStreamStatus_Status" json:"status,omitempty"`
}

func (x *CreateStreamStatus) Reset() {
	*x = CreateStreamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStreamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamStatus) ProtoMessage() {}

func (x *CreateStreamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamStatus.ProtoReflect.Descriptor instead.
func (*CreateStreamStatus) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{15}
}

func (x *CreateStreamStatus) GetStatus() CreateStreamStatus_Status {
	if x != nil {
		return x.Status
	}
	return CreateStreamStatus_SUCCESS
}

type UpdateStreamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UpdateStreamStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.UpdateStreamStatus_Status" json:"status,omitempty"`
}

func (x *UpdateStreamStatus) Reset() {
	*x = UpdateStreamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStreamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamStatus) ProtoMessage() {}

func (x *UpdateStreamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamStatus.ProtoReflect.Descriptor instead.
func (*UpdateStreamStatus) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateStreamStatus) GetStatus() UpdateStreamStatus_Status {
	if x != nil {
		return x.Status
	}
	return UpdateStreamStatus_SUCCESS
}

type UpdateSubscriberStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UpdateSubscriberStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.UpdateSubscriberStatus_Status" json:"status,omitempty"`
}

func (x *UpdateSubscriberStatus) Reset() {
	*x = UpdateSubscriberStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubscriberStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriberStatus) ProtoMessage() {}

func (x *UpdateSubscriberStatus) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriberStatus.ProtoReflect.Descriptor instead.
func (*UpdateSubscriberStatus) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateSubscriberStatus) GetStatus() UpdateSubscriberStatus_Status {
	if x != nil {
		return x.Status
	}
	return UpdateSubscriberStatus_SUCCESS
}

type StreamSubscriberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope               string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Stream              string `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	Subscriber          string `protobuf:"bytes,3,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	OperationGeneration int64  `protobuf:"varint,4,opt,name=operationGeneration,proto3" json:"operationGeneration,omitempty"`
}

func (x *StreamSubscriberInfo) Reset() {
	*x = StreamSubscriberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSubscriberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSubscriberInfo) ProtoMessage() {}

func (x *StreamSubscriberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSubscriberInfo.ProtoReflect.Descriptor instead.
func (*StreamSubscriberInfo) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{18}
}

func (x *StreamSubscriberInfo) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *StreamSubscriberInfo) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *StreamSubscriberInfo) GetSubscriber() string {
	if x != nil {
		return x.Subscriber
	}
	return ""
}

func (x *StreamSubscriberInfo) GetOperationGeneration() int64 {
	if x != nil {
		return x.OperationGeneration
	}
	return 0
}

type SubscriberStreamCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriber    string     `protobuf:"bytes,1,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	Generation    int64      `protobuf:"varint,2,opt,name=generation,proto3" json:"generation,omitempty"`
	ReaderGroupId string     `protobuf:"bytes,3,opt,name=readerGroupId,proto3" json:"readerGroupId,omitempty"`
	StreamCut     *StreamCut `protobuf:"bytes,4,opt,name=streamCut,proto3" json:"streamCut,omitempty"`
}

func (x *SubscriberStreamCut) Reset() {
	*x = SubscriberStreamCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberStreamCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberStreamCut) ProtoMessage() {}

func (x *SubscriberStreamCut) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberStreamCut.ProtoReflect.Descriptor instead.
func (*SubscriberStreamCut) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{19}
}

func (x *SubscriberStreamCut) GetSubscriber() string {
	if x != nil {
		return x.Subscriber
	}
	return ""
}

func (x *SubscriberStreamCut) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *SubscriberStreamCut) GetReaderGroupId() string {
	if x != nil {
		return x.ReaderGroupId
	}
	return ""
}

func (x *SubscriberStreamCut) GetStreamCut() *StreamCut {
	if x != nil {
		return x.StreamCut
	}
	return nil
}

type SubscribersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscribers []string                   `protobuf:"bytes,1,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
	Status      SubscribersResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.SubscribersResponse_Status" json:"status,omitempty"`
}

func (x *SubscribersResponse) Reset() {
	*x = SubscribersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribersResponse) ProtoMessage() {}

func (x *SubscribersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribersResponse.ProtoReflect.Descriptor instead.
func (*SubscribersResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{20}
}

func (x *SubscribersResponse) GetSubscribers() []string {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

func (x *SubscribersResponse) GetStatus() SubscribersResponse_Status {
	if x != nil {
		return x.Status
	}
	return SubscribersResponse_SUCCESS
}

type DeleteStreamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DeleteStreamStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.DeleteStreamStatus_Status" json:"status,omitempty"`
}

func (x *DeleteStreamStatus) Reset() {
	*x = DeleteStreamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStreamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStreamStatus) ProtoMessage() {}

func (x *DeleteStreamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStreamStatus.ProtoReflect.Descriptor instead.
func (*DeleteStreamStatus) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteStreamStatus) GetStatus() DeleteStreamStatus_Status {
	if x != nil {
		return x.Status
	}
	return DeleteStreamStatus_SUCCESS
}

type CreateScopeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status CreateScopeStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.CreateScopeStatus_Status" json:"status,omitempty"`
}

func (x *CreateScopeStatus) Reset() {
	*x = CreateScopeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScopeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScopeStatus) ProtoMessage() {}

func (x *CreateScopeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScopeStatus.ProtoReflect.Descriptor instead.
func (*CreateScopeStatus) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{22}
}

func (x *CreateScopeStatus) GetStatus() CreateScopeStatus_Status {
	if x != nil {
		return x.Status
	}
	return CreateScopeStatus_SUCCESS
}

type DeleteScopeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DeleteScopeStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.DeleteScopeStatus_Status" json:"status,omitempty"`
}

func (x *DeleteScopeStatus) Reset() {
	*x = DeleteScopeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScopeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScopeStatus) ProtoMessage() {}

func (x *DeleteScopeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScopeStatus.ProtoReflect.Descriptor instead.
func (*DeleteScopeStatus) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteScopeStatus) GetStatus() DeleteScopeStatus_Status {
	if x != nil {
		return x.Status
	}
	return DeleteScopeStatus_SUCCESS
}

type TxnStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status TxnStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.TxnStatus_Status" json:"status,omitempty"`
}

func (x *TxnStatus) Reset() {
	*x = TxnStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnStatus) ProtoMessage() {}

func (x *TxnStatus) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnStatus.ProtoReflect.Descriptor instead.
func (*TxnStatus) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{24}
}

func (x *TxnStatus) GetStatus() TxnStatus_Status {
	if x != nil {
		return x.Status
	}
	return TxnStatus_SUCCESS
}

type PingTxnStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status PingTxnStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.PingTxnStatus_Status" json:"status,omitempty"`
}

func (x *PingTxnStatus) Reset() {
	*x = PingTxnStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingTxnStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingTxnStatus) ProtoMessage() {}

func (x *PingTxnStatus) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingTxnStatus.ProtoReflect.Descriptor instead.
func (*PingTxnStatus) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{25}
}

func (x *PingTxnStatus) GetStatus() PingTxnStatus_Status {
	if x != nil {
		return x.Status
	}
	return PingTxnStatus_OK
}

type TxnState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State TxnState_State `protobuf:"varint,1,opt,name=state,proto3,enum=io.pravega.controller.stream.api.grpc.v1.TxnState_State" json:"state,omitempty"`
}

func (x *TxnState) Reset() {
	*x = TxnState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnState) ProtoMessage() {}

func (x *TxnState) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnState.ProtoReflect.Descriptor instead.
func (*TxnState) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{26}
}

func (x *TxnState) GetState() TxnState_State {
	if x != nil {
		return x.State
	}
	return TxnState_UNKNOWN
}

type ScopeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ScopeInfo) Reset() {
	*x = ScopeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeInfo) ProtoMessage() {}

func (x *ScopeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeInfo.ProtoReflect.Descriptor instead.
func (*ScopeInfo) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{27}
}

func (x *ScopeInfo) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ContinuationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ContinuationToken) Reset() {
	*x = ContinuationToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuationToken) ProtoMessage() {}

func (x *ContinuationToken) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuationToken.ProtoReflect.Descriptor instead.
func (*ContinuationToken) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{28}
}

func (x *ContinuationToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type StreamsInScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope             *ScopeInfo         `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ContinuationToken *ContinuationToken `protobuf:"bytes,2,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
}

func (x *StreamsInScopeRequest) Reset() {
	*x = StreamsInScopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamsInScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamsInScopeRequest) ProtoMessage() {}

func (x *StreamsInScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamsInScopeRequest.ProtoReflect.Descriptor instead.
func (*StreamsInScopeRequest) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{29}
}

func (x *StreamsInScopeRequest) GetScope() *ScopeInfo {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *StreamsInScopeRequest) GetContinuationToken() *ContinuationToken {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

type StreamsInScopeWithTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope             *ScopeInfo         `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Tag               string             `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	ContinuationToken *ContinuationToken `protobuf:"bytes,3,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
}

func (x *StreamsInScopeWithTagRequest) Reset() {
	*x = StreamsInScopeWithTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamsInScopeWithTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamsInScopeWithTagRequest) ProtoMessage() {}

func (x *StreamsInScopeWithTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamsInScopeWithTagRequest.ProtoReflect.Descriptor instead.
func (*StreamsInScopeWithTagRequest) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{30}
}

func (x *StreamsInScopeWithTagRequest) GetScope() *ScopeInfo {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *StreamsInScopeWithTagRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *StreamsInScopeWithTagRequest) GetContinuationToken() *ContinuationToken {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

type StreamsInScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Streams           []*StreamInfo                 `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
	ContinuationToken *ContinuationToken            `protobuf:"bytes,2,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
	Status            StreamsInScopeResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.StreamsInScopeResponse_Status" json:"status,omitempty"`
}

func (x *StreamsInScopeResponse) Reset() {
	*x = StreamsInScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamsInScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamsInScopeResponse) ProtoMessage() {}

func (x *StreamsInScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamsInScopeResponse.ProtoReflect.Descriptor instead.
func (*StreamsInScopeResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{31}
}

func (x *StreamsInScopeResponse) GetStreams() []*StreamInfo {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *StreamsInScopeResponse) GetContinuationToken() *ContinuationToken {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

func (x *StreamsInScopeResponse) GetStatus() StreamsInScopeResponse_Status {
	if x != nil {
		return x.Status
	}
	return StreamsInScopeResponse_SUCCESS
}

type StreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope           string                     `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Stream          string                     `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	AccessOperation StreamInfo_AccessOperation `protobuf:"varint,3,opt,name=accessOperation,proto3,enum=io.pravega.controller.stream.api.grpc.v1.StreamInfo_AccessOperation" json:"accessOperation,omitempty"`
}

func (x *StreamInfo) Reset() {
	*x = StreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfo) ProtoMessage() {}

func (x *StreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfo.ProtoReflect.Descriptor instead.
func (*StreamInfo) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{32}
}

func (x *StreamInfo) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *StreamInfo) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *StreamInfo) GetAccessOperation() StreamInfo_AccessOperation {
	if x != nil {
		return x.AccessOperation
	}
	return StreamInfo_UNSPECIFIED
}

type ScalingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScaleType      ScalingPolicy_ScalingPolicyType `protobuf:"varint,1,opt,name=scaleType,proto3,enum=io.pravega.controller.stream.api.grpc.v1.ScalingPolicy_ScalingPolicyType" json:"scaleType,omitempty"`
	TargetRate     int32                           `protobuf:"varint,2,opt,name=targetRate,proto3" json:"targetRate,omitempty"`
	ScaleFactor    int32                           `protobuf:"varint,3,opt,name=scaleFactor,proto3" json:"scaleFactor,omitempty"`
	MinNumSegments int32                           `protobuf:"varint,4,opt,name=minNumSegments,proto3" json:"minNumSegments,omitempty"`
}

func (x *ScalingPolicy) Reset() {
	*x = ScalingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalingPolicy) ProtoMessage() {}

func (x *ScalingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalingPolicy.ProtoReflect.Descriptor instead.
func (*ScalingPolicy) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{33}
}

func (x *ScalingPolicy) GetScaleType() ScalingPolicy_ScalingPolicyType {
	if x != nil {
		return x.ScaleType
	}
	return ScalingPolicy_FIXED_NUM_SEGMENTS
}

func (x *ScalingPolicy) GetTargetRate() int32 {
	if x != nil {
		return x.TargetRate
	}
	return 0
}

func (x *ScalingPolicy) GetScaleFactor() int32 {
	if x != nil {
		return x.ScaleFactor
	}
	return 0
}

func (x *ScalingPolicy) GetMinNumSegments() int32 {
	if x != nil {
		return x.MinNumSegments
	}
	return 0
}

type RetentionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetentionType  RetentionPolicy_RetentionPolicyType `protobuf:"varint,1,opt,name=retentionType,proto3,enum=io.pravega.controller.stream.api.grpc.v1.RetentionPolicy_RetentionPolicyType" json:"retentionType,omitempty"`
	RetentionParam int64                               `protobuf:"varint,2,opt,name=retentionParam,proto3" json:"retentionParam,omitempty"`
	RetentionMax   int64                               `protobuf:"varint,3,opt,name=retentionMax,proto3" json:"retentionMax,omitempty"`
}

func (x *RetentionPolicy) Reset() {
	*x = RetentionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetentionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetentionPolicy) ProtoMessage() {}

func (x *RetentionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetentionPolicy.ProtoReflect.Descriptor instead.
func (*RetentionPolicy) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{34}
}

func (x *RetentionPolicy) GetRetentionType() RetentionPolicy_RetentionPolicyType {
	if x != nil {
		return x.RetentionType
	}
	return RetentionPolicy_UNKNOWN
}

func (x *RetentionPolicy) GetRetentionParam() int64 {
	if x != nil {
		return x.RetentionParam
	}
	return 0
}

func (x *RetentionPolicy) GetRetentionMax() int64 {
	if x != nil {
		return x.RetentionMax
	}
	return 0
}

type StreamConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfo                  *StreamInfo      `protobuf:"bytes,1,opt,name=streamInfo,proto3" json:"streamInfo,omitempty"`
	ScalingPolicy               *ScalingPolicy   `protobuf:"bytes,2,opt,name=scalingPolicy,proto3" json:"scalingPolicy,omitempty"`
	RetentionPolicy             *RetentionPolicy `protobuf:"bytes,3,opt,name=retentionPolicy,proto3" json:"retentionPolicy,omitempty"`
	Tags                        *Tags            `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	TimestampAggregationTimeout int64            `protobuf:"varint,5,opt,name=timestampAggregationTimeout,proto3" json:"timestampAggregationTimeout,omitempty"`
	RolloverSizeBytes           int64            `protobuf:"varint,6,opt,name=rolloverSizeBytes,proto3" json:"rolloverSizeBytes,omitempty"`
}

func (x *StreamConfig) Reset() {
	*x = StreamConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamConfig) ProtoMessage() {}

func (x *StreamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamConfig.ProtoReflect.Descriptor instead.
func (*StreamConfig) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{35}
}

func (x *StreamConfig) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *StreamConfig) GetScalingPolicy() *ScalingPolicy {
	if x != nil {
		return x.ScalingPolicy
	}
	return nil
}

func (x *StreamConfig) GetRetentionPolicy() *RetentionPolicy {
	if x != nil {
		return x.RetentionPolicy
	}
	return nil
}

func (x *StreamConfig) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *StreamConfig) GetTimestampAggregationTimeout() int64 {
	if x != nil {
		return x.TimestampAggregationTimeout
	}
	return 0
}

func (x *StreamConfig) GetRolloverSizeBytes() int64 {
	if x != nil {
		return x.RolloverSizeBytes
	}
	return 0
}

type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag []string `protobuf:"bytes,1,rep,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{36}
}

func (x *Tags) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

type StreamCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfo *StreamInfo     `protobuf:"bytes,1,opt,name=streamInfo,proto3" json:"streamInfo,omitempty"`
	Cut        map[int64]int64 `protobuf:"bytes,2,rep,name=cut,proto3" json:"cut,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *StreamCut) Reset() {
	*x = StreamCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCut) ProtoMessage() {}

func (x *StreamCut) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCut.ProtoReflect.Descriptor instead.
func (*StreamCut) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{37}
}

func (x *StreamCut) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *StreamCut) GetCut() map[int64]int64 {
	if x != nil {
		return x.Cut
	}
	return nil
}

type StreamCutRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfo *StreamInfo     `protobuf:"bytes,1,opt,name=streamInfo,proto3" json:"streamInfo,omitempty"`
	From       map[int64]int64 `protobuf:"bytes,2,rep,name=from,proto3" json:"from,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	To         map[int64]int64 `protobuf:"bytes,3,rep,name=to,proto3" json:"to,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *StreamCutRange) Reset() {
	*x = StreamCutRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCutRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCutRange) ProtoMessage() {}

func (x *StreamCutRange) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCutRange.ProtoReflect.Descriptor instead.
func (*StreamCutRange) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{38}
}

func (x *StreamCutRange) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *StreamCutRange) GetFrom() map[int64]int64 {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *StreamCutRange) GetTo() map[int64]int64 {
	if x != nil {
		return x.To
	}
	return nil
}

type SegmentId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfo *StreamInfo `protobuf:"bytes,1,opt,name=streamInfo,proto3" json:"streamInfo,omitempty"`
	SegmentId  int64       `protobuf:"varint,2,opt,name=segmentId,proto3" json:"segmentId,omitempty"`
}

func (x *SegmentId) Reset() {
	*x = SegmentId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentId) ProtoMessage() {}

func (x *SegmentId) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentId.ProtoReflect.Descriptor instead.
func (*SegmentId) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{39}
}

func (x *SegmentId) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *SegmentId) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

type SegmentRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentId *SegmentId `protobuf:"bytes,1,opt,name=segmentId,proto3" json:"segmentId,omitempty"`
	MinKey    float64    `protobuf:"fixed64,2,opt,name=minKey,proto3" json:"minKey,omitempty"`
	MaxKey    float64    `protobuf:"fixed64,3,opt,name=maxKey,proto3" json:"maxKey,omitempty"`
}

func (x *SegmentRange) Reset() {
	*x = SegmentRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentRange) ProtoMessage() {}

func (x *SegmentRange) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentRange.ProtoReflect.Descriptor instead.
func (*SegmentRange) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{40}
}

func (x *SegmentRange) GetSegmentId() *SegmentId {
	if x != nil {
		return x.SegmentId
	}
	return nil
}

func (x *SegmentRange) GetMinKey() float64 {
	if x != nil {
		return x.MinKey
	}
	return 0
}

func (x *SegmentRange) GetMaxKey() float64 {
	if x != nil {
		return x.MaxKey
	}
	return 0
}

type NodeUri struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Port     int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *NodeUri) Reset() {
	*x = NodeUri{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeUri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeUri) ProtoMessage() {}

func (x *NodeUri) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeUri.ProtoReflect.Descriptor instead.
func (*NodeUri) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{41}
}

func (x *NodeUri) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *NodeUri) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type SegmentsAtTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments        []*SegmentsAtTime_SegmentLocation `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	DelegationToken string                            `protobuf:"bytes,2,opt,name=delegationToken,proto3" json:"delegationToken,omitempty"`
}

func (x *SegmentsAtTime) Reset() {
	*x = SegmentsAtTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentsAtTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentsAtTime) ProtoMessage() {}

func (x *SegmentsAtTime) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentsAtTime.ProtoReflect.Descriptor instead.
func (*SegmentsAtTime) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{42}
}

func (x *SegmentsAtTime) GetSegments() []*SegmentsAtTime_SegmentLocation {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *SegmentsAtTime) GetDelegationToken() string {
	if x != nil {
		return x.DelegationToken
	}
	return ""
}

type TxnId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighBits int64 `protobuf:"varint,1,opt,name=highBits,proto3" json:"highBits,omitempty"`
	LowBits  int64 `protobuf:"varint,2,opt,name=lowBits,proto3" json:"lowBits,omitempty"`
}

func (x *TxnId) Reset() {
	*x = TxnId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnId) ProtoMessage() {}

func (x *TxnId) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnId.ProtoReflect.Descriptor instead.
func (*TxnId) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{43}
}

func (x *TxnId) GetHighBits() int64 {
	if x != nil {
		return x.HighBits
	}
	return 0
}

func (x *TxnId) GetLowBits() int64 {
	if x != nil {
		return x.LowBits
	}
	return 0
}

type CreateTxnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfo *StreamInfo `protobuf:"bytes,1,opt,name=streamInfo,proto3" json:"streamInfo,omitempty"`
	Lease      int64       `protobuf:"varint,2,opt,name=lease,proto3" json:"lease,omitempty"`
	// Deprecated: Do not use.
	ScaleGracePeriod int64 `protobuf:"varint,3,opt,name=scaleGracePeriod,proto3" json:"scaleGracePeriod,omitempty"`
}

func (x *CreateTxnRequest) Reset() {
	*x = CreateTxnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTxnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTxnRequest) ProtoMessage() {}

func (x *CreateTxnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTxnRequest.ProtoReflect.Descriptor instead.
func (*CreateTxnRequest) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{44}
}

func (x *CreateTxnRequest) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *CreateTxnRequest) GetLease() int64 {
	if x != nil {
		return x.Lease
	}
	return 0
}

// Deprecated: Do not use.
func (x *CreateTxnRequest) GetScaleGracePeriod() int64 {
	if x != nil {
		return x.ScaleGracePeriod
	}
	return 0
}

type CreateTxnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnId           *TxnId          `protobuf:"bytes,1,opt,name=txnId,proto3" json:"txnId,omitempty"`
	ActiveSegments  []*SegmentRange `protobuf:"bytes,2,rep,name=activeSegments,proto3" json:"activeSegments,omitempty"`
	DelegationToken string          `protobuf:"bytes,3,opt,name=delegationToken,proto3" json:"delegationToken,omitempty"`
}

func (x *CreateTxnResponse) Reset() {
	*x = CreateTxnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTxnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTxnResponse) ProtoMessage() {}

func (x *CreateTxnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTxnResponse.ProtoReflect.Descriptor instead.
func (*CreateTxnResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{45}
}

func (x *CreateTxnResponse) GetTxnId() *TxnId {
	if x != nil {
		return x.TxnId
	}
	return nil
}

func (x *CreateTxnResponse) GetActiveSegments() []*SegmentRange {
	if x != nil {
		return x.ActiveSegments
	}
	return nil
}

func (x *CreateTxnResponse) GetDelegationToken() string {
	if x != nil {
		return x.DelegationToken
	}
	return ""
}

type TxnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfo *StreamInfo `protobuf:"bytes,1,opt,name=streamInfo,proto3" json:"streamInfo,omitempty"`
	TxnId      *TxnId      `protobuf:"bytes,2,opt,name=txnId,proto3" json:"txnId,omitempty"`
	WriterId   string      `protobuf:"bytes,3,opt,name=writerId,proto3" json:"writerId,omitempty"`
	Timestamp  int64       `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TxnRequest) Reset() {
	*x = TxnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnRequest) ProtoMessage() {}

func (x *TxnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnRequest.ProtoReflect.Descriptor instead.
func (*TxnRequest) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{46}
}

func (x *TxnRequest) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *TxnRequest) GetTxnId() *TxnId {
	if x != nil {
		return x.TxnId
	}
	return nil
}

func (x *TxnRequest) GetWriterId() string {
	if x != nil {
		return x.WriterId
	}
	return ""
}

func (x *TxnRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PingTxnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfo *StreamInfo `protobuf:"bytes,1,opt,name=streamInfo,proto3" json:"streamInfo,omitempty"`
	TxnId      *TxnId      `protobuf:"bytes,2,opt,name=txnId,proto3" json:"txnId,omitempty"`
	Lease      int64       `protobuf:"varint,3,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *PingTxnRequest) Reset() {
	*x = PingTxnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingTxnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingTxnRequest) ProtoMessage() {}

func (x *PingTxnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingTxnRequest.ProtoReflect.Descriptor instead.
func (*PingTxnRequest) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{47}
}

func (x *PingTxnRequest) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *PingTxnRequest) GetTxnId() *TxnId {
	if x != nil {
		return x.TxnId
	}
	return nil
}

func (x *PingTxnRequest) GetLease() int64 {
	if x != nil {
		return x.Lease
	}
	return 0
}

type SuccessorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments        []*SuccessorResponse_SegmentEntry `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	DelegationToken string                            `protobuf:"bytes,2,opt,name=delegationToken,proto3" json:"delegationToken,omitempty"`
}

func (x *SuccessorResponse) Reset() {
	*x = SuccessorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessorResponse) ProtoMessage() {}

func (x *SuccessorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessorResponse.ProtoReflect.Descriptor instead.
func (*SuccessorResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{48}
}

func (x *SuccessorResponse) GetSegments() []*SuccessorResponse_SegmentEntry {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *SuccessorResponse) GetDelegationToken() string {
	if x != nil {
		return x.DelegationToken
	}
	return ""
}

type StreamCutRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments        []*SegmentId `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	DelegationToken string       `protobuf:"bytes,2,opt,name=delegationToken,proto3" json:"delegationToken,omitempty"`
}

func (x *StreamCutRangeResponse) Reset() {
	*x = StreamCutRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCutRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCutRangeResponse) ProtoMessage() {}

func (x *StreamCutRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCutRangeResponse.ProtoReflect.Descriptor instead.
func (*StreamCutRangeResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{49}
}

func (x *StreamCutRangeResponse) GetSegments() []*SegmentId {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *StreamCutRangeResponse) GetDelegationToken() string {
	if x != nil {
		return x.DelegationToken
	}
	return ""
}

type ScaleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfo     *StreamInfo                   `protobuf:"bytes,1,opt,name=streamInfo,proto3" json:"streamInfo,omitempty"`
	SealedSegments []int64                       `protobuf:"varint,2,rep,packed,name=sealedSegments,proto3" json:"sealedSegments,omitempty"`
	NewKeyRanges   []*ScaleRequest_KeyRangeEntry `protobuf:"bytes,3,rep,name=newKeyRanges,proto3" json:"newKeyRanges,omitempty"`
	ScaleTimestamp int64                         `protobuf:"varint,4,opt,name=scaleTimestamp,proto3" json:"scaleTimestamp,omitempty"`
}

func (x *ScaleRequest) Reset() {
	*x = ScaleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleRequest) ProtoMessage() {}

func (x *ScaleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleRequest.ProtoReflect.Descriptor instead.
func (*ScaleRequest) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{50}
}

func (x *ScaleRequest) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *ScaleRequest) GetSealedSegments() []int64 {
	if x != nil {
		return x.SealedSegments
	}
	return nil
}

func (x *ScaleRequest) GetNewKeyRanges() []*ScaleRequest_KeyRangeEntry {
	if x != nil {
		return x.NewKeyRanges
	}
	return nil
}

func (x *ScaleRequest) GetScaleTimestamp() int64 {
	if x != nil {
		return x.ScaleTimestamp
	}
	return 0
}

type ScaleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   ScaleResponse_ScaleStreamStatus `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.ScaleResponse_ScaleStreamStatus" json:"status,omitempty"`
	Segments []*SegmentRange                 `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
	Epoch    int32                           `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ScaleResponse) Reset() {
	*x = ScaleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleResponse) ProtoMessage() {}

func (x *ScaleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleResponse.ProtoReflect.Descriptor instead.
func (*ScaleResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{51}
}

func (x *ScaleResponse) GetStatus() ScaleResponse_ScaleStreamStatus {
	if x != nil {
		return x.Status
	}
	return ScaleResponse_STARTED
}

func (x *ScaleResponse) GetSegments() []*SegmentRange {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *ScaleResponse) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type ScaleStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfo *StreamInfo `protobuf:"bytes,1,opt,name=streamInfo,proto3" json:"streamInfo,omitempty"`
	Epoch      int32       `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ScaleStatusRequest) Reset() {
	*x = ScaleStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleStatusRequest) ProtoMessage() {}

func (x *ScaleStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleStatusRequest.ProtoReflect.Descriptor instead.
func (*ScaleStatusRequest) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{52}
}

func (x *ScaleStatusRequest) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *ScaleStatusRequest) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type ScaleStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ScaleStatusResponse_ScaleStatus `protobuf:"varint,1,opt,name=status,proto3,enum=io.pravega.controller.stream.api.grpc.v1.ScaleStatusResponse_ScaleStatus" json:"status,omitempty"`
}

func (x *ScaleStatusResponse) Reset() {
	*x = ScaleStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleStatusResponse) ProtoMessage() {}

func (x *ScaleStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleStatusResponse.ProtoReflect.Descriptor instead.
func (*ScaleStatusResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{53}
}

func (x *ScaleStatusResponse) GetStatus() ScaleStatusResponse_ScaleStatus {
	if x != nil {
		return x.Status
	}
	return ScaleStatusResponse_IN_PROGRESS
}

type SegmentRanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentRanges   []*SegmentRange `protobuf:"bytes,1,rep,name=segmentRanges,proto3" json:"segmentRanges,omitempty"`
	DelegationToken string          `protobuf:"bytes,2,opt,name=delegationToken,proto3" json:"delegationToken,omitempty"`
}

func (x *SegmentRanges) Reset() {
	*x = SegmentRanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentRanges) ProtoMessage() {}

func (x *SegmentRanges) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentRanges.ProtoReflect.Descriptor instead.
func (*SegmentRanges) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{54}
}

func (x *SegmentRanges) GetSegmentRanges() []*SegmentRange {
	if x != nil {
		return x.SegmentRanges
	}
	return nil
}

func (x *SegmentRanges) GetDelegationToken() string {
	if x != nil {
		return x.DelegationToken
	}
	return ""
}

type GetSegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfo *StreamInfo `protobuf:"bytes,1,opt,name=streamInfo,proto3" json:"streamInfo,omitempty"`
	Timestamp  int64       `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetSegmentsRequest) Reset() {
	*x = GetSegmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentsRequest) ProtoMessage() {}

func (x *GetSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentsRequest.ProtoReflect.Descriptor instead.
func (*GetSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{55}
}

func (x *GetSegmentsRequest) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *GetSegmentsRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetEpochSegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfo *StreamInfo `protobuf:"bytes,1,opt,name=streamInfo,proto3" json:"streamInfo,omitempty"`
	Epoch      int32       `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *GetEpochSegmentsRequest) Reset() {
	*x = GetEpochSegmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEpochSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEpochSegmentsRequest) ProtoMessage() {}

func (x *GetEpochSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEpochSegmentsRequest.ProtoReflect.Descriptor instead.
func (*GetEpochSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{56}
}

func (x *GetEpochSegmentsRequest) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *GetEpochSegmentsRequest) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type SegmentValidityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response bool `protobuf:"varint,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *SegmentValidityResponse) Reset() {
	*x = SegmentValidityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentValidityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentValidityResponse) ProtoMessage() {}

func (x *SegmentValidityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentValidityResponse.ProtoReflect.Descriptor instead.
func (*SegmentValidityResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{57}
}

func (x *SegmentValidityResponse) GetResponse() bool {
	if x != nil {
		return x.Response
	}
	return false
}

type StreamCutValidityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response bool `protobuf:"varint,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *StreamCutValidityResponse) Reset() {
	*x = StreamCutValidityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCutValidityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCutValidityResponse) ProtoMessage() {}

func (x *StreamCutValidityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCutValidityResponse.ProtoReflect.Descriptor instead.
func (*StreamCutValidityResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{58}
}

func (x *StreamCutValidityResponse) GetResponse() bool {
	if x != nil {
		return x.Response
	}
	return false
}

type DelegationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegationToken string `protobuf:"bytes,1,opt,name=delegationToken,proto3" json:"delegationToken,omitempty"`
}

func (x *DelegationToken) Reset() {
	*x = DelegationToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationToken) ProtoMessage() {}

func (x *DelegationToken) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationToken.ProtoReflect.Descriptor instead.
func (*DelegationToken) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{59}
}

func (x *DelegationToken) GetDelegationToken() string {
	if x != nil {
		return x.DelegationToken
	}
	return ""
}

type RemoveWriterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Writer string      `protobuf:"bytes,1,opt,name=writer,proto3" json:"writer,omitempty"`
	Stream *StreamInfo `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *RemoveWriterRequest) Reset() {
	*x = RemoveWriterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveWriterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveWriterRequest) ProtoMessage() {}

func (x *RemoveWriterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveWriterRequest.ProtoReflect.Descriptor instead.
func (*RemoveWriterRequest) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{60}
}

func (x *RemoveWriterRequest) GetWriter() string {
	if x != nil {
		return x.Writer
	}
	return ""
}

func (x *RemoveWriterRequest) GetStream() *StreamInfo {
	if x != nil {
		return x.Stream
	}
	return nil
}

type RemoveWriterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result RemoveWriterResponse_Status `protobuf:"varint,1,opt,name=result,proto3,enum=io.pravega.controller.stream.api.grpc.v1.RemoveWriterResponse_Status" json:"result,omitempty"`
}

func (x *RemoveWriterResponse) Reset() {
	*x = RemoveWriterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveWriterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveWriterResponse) ProtoMessage() {}

func (x *RemoveWriterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveWriterResponse.ProtoReflect.Descriptor instead.
func (*RemoveWriterResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{61}
}

func (x *RemoveWriterResponse) GetResult() RemoveWriterResponse_Status {
	if x != nil {
		return x.Result
	}
	return RemoveWriterResponse_SUCCESS
}

type TimestampFromWriter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Writer    string     `protobuf:"bytes,1,opt,name=writer,proto3" json:"writer,omitempty"`
	Position  *StreamCut `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Timestamp int64      `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TimestampFromWriter) Reset() {
	*x = TimestampFromWriter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampFromWriter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampFromWriter) ProtoMessage() {}

func (x *TimestampFromWriter) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampFromWriter.ProtoReflect.Descriptor instead.
func (*TimestampFromWriter) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{62}
}

func (x *TimestampFromWriter) GetWriter() string {
	if x != nil {
		return x.Writer
	}
	return ""
}

func (x *TimestampFromWriter) GetPosition() *StreamCut {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *TimestampFromWriter) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type TimestampResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result TimestampResponse_Status `protobuf:"varint,1,opt,name=result,proto3,enum=io.pravega.controller.stream.api.grpc.v1.TimestampResponse_Status" json:"result,omitempty"`
}

func (x *TimestampResponse) Reset() {
	*x = TimestampResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampResponse) ProtoMessage() {}

func (x *TimestampResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampResponse.ProtoReflect.Descriptor instead.
func (*TimestampResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{63}
}

func (x *TimestampResponse) GetResult() TimestampResponse_Status {
	if x != nil {
		return x.Result
	}
	return TimestampResponse_SUCCESS
}

type ScopesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes            []string           `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
	ContinuationToken *ContinuationToken `protobuf:"bytes,2,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
}

func (x *ScopesResponse) Reset() {
	*x = ScopesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopesResponse) ProtoMessage() {}

func (x *ScopesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopesResponse.ProtoReflect.Descriptor instead.
func (*ScopesResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{64}
}

func (x *ScopesResponse) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *ScopesResponse) GetContinuationToken() *ContinuationToken {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

type ScopesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContinuationToken *ContinuationToken `protobuf:"bytes,1,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
}

func (x *ScopesRequest) Reset() {
	*x = ScopesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopesRequest) ProtoMessage() {}

func (x *ScopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopesRequest.ProtoReflect.Descriptor instead.
func (*ScopesRequest) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{65}
}

func (x *ScopesRequest) GetContinuationToken() *ContinuationToken {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

type ExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *ExistsResponse) Reset() {
	*x = ExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsResponse) ProtoMessage() {}

func (x *ExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsResponse.ProtoReflect.Descriptor instead.
func (*ExistsResponse) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{66}
}

func (x *ExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type SegmentsAtTime_SegmentLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentId *SegmentId `protobuf:"bytes,1,opt,name=segmentId,proto3" json:"segmentId,omitempty"`
	Offset    int64      `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *SegmentsAtTime_SegmentLocation) Reset() {
	*x = SegmentsAtTime_SegmentLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentsAtTime_SegmentLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentsAtTime_SegmentLocation) ProtoMessage() {}

func (x *SegmentsAtTime_SegmentLocation) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentsAtTime_SegmentLocation.ProtoReflect.Descriptor instead.
func (*SegmentsAtTime_SegmentLocation) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{42, 0}
}

func (x *SegmentsAtTime_SegmentLocation) GetSegmentId() *SegmentId {
	if x != nil {
		return x.SegmentId
	}
	return nil
}

func (x *SegmentsAtTime_SegmentLocation) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type SuccessorResponse_SegmentEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment *SegmentRange `protobuf:"bytes,1,opt,name=segment,proto3" json:"segment,omitempty"`
	Value   []int64       `protobuf:"varint,2,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *SuccessorResponse_SegmentEntry) Reset() {
	*x = SuccessorResponse_SegmentEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessorResponse_SegmentEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessorResponse_SegmentEntry) ProtoMessage() {}

func (x *SuccessorResponse_SegmentEntry) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessorResponse_SegmentEntry.ProtoReflect.Descriptor instead.
func (*SuccessorResponse_SegmentEntry) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{48, 0}
}

func (x *SuccessorResponse_SegmentEntry) GetSegment() *SegmentRange {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *SuccessorResponse_SegmentEntry) GetValue() []int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type ScaleRequest_KeyRangeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start float64 `protobuf:"fixed64,1,opt,name=start,proto3" json:"start,omitempty"`
	End   float64 `protobuf:"fixed64,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ScaleRequest_KeyRangeEntry) Reset() {
	*x = ScaleRequest_KeyRangeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_client_proto_Controller_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleRequest_KeyRangeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleRequest_KeyRangeEntry) ProtoMessage() {}

func (x *ScaleRequest_KeyRangeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_controller_client_proto_Controller_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleRequest_KeyRangeEntry.ProtoReflect.Descriptor instead.
func (*ScaleRequest_KeyRangeEntry) Descriptor() ([]byte, []int) {
	return file_controller_client_proto_Controller_proto_rawDescGZIP(), []int{50, 0}
}

func (x *ScaleRequest_KeyRangeEntry) GetStart() float64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ScaleRequest_KeyRangeEntry) GetEnd() float64 {
	if x != nil {
		return x.End
	}
	return 0
}

var File_controller_client_proto_Controller_proto protoreflect.FileDescriptor

var file_controller_client_proto_Controller_proto_rawDesc = []byte{
	0x0a, 0x28, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x52, 0x49, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x69, 0x52, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x55, 0x52, 0x49, 0x22, 0xc0, 0x05, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x4c, 0x0a, 0x21, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x4f, 0x75,
	0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1f, 0x6d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x63, 0x0a,
	0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x75, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x74, 0x52, 0x12,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75,
	0x74, 0x73, 0x12, 0x5f, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75,
	0x74, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x75, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x22, 0x34, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f,
	0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x22, 0x91, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x62, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4a, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x47, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0x8f, 0x01, 0x0a, 0x0f,
	0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x02,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x5a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4c, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x52, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x22, 0xb1, 0x01, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0xe9, 0x01,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x48, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x22, 0xe2, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x61, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x22, 0xf7,
	0x01, 0x0a, 0x13, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6b, 0x76, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x76, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x6f,
	0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x1b, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x64, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4c, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0x43,
	0x0a, 0x11, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x76, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x76, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x16, 0x4b, 0x56, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf8, 0x02, 0x0a, 0x17, 0x4b, 0x56, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x08, 0x6b, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x6b, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x56, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22,
	0xac, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x56, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x56, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0xd6,
	0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x63, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x22, 0xd3, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43,
	0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x60, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x22, 0x81, 0x02,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42,
	0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x05, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xce, 0x01, 0x0a, 0x13, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x74,
	0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x13,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x38, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0xc2, 0x01,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x4f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x4f, 0x50,
	0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x03, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x4f, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59,
	0x10, 0x03, 0x22, 0xb4, 0x01, 0x0a, 0x09, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x53, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0x8e, 0x02, 0x0a, 0x0d, 0x50, 0x69,
	0x6e, 0x67, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d,
	0x41, 0x58, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x19,
	0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x22, 0xb4, 0x01, 0x0a, 0x08, 0x54,
	0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x58, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x05, 0x22, 0x21, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x22, 0x29, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xcd, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xe6, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x49, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x69, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xed, 0x02, 0x0a, 0x16, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x12, 0x69, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47,
	0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x37, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0x86, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x6e, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44,
	0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x52, 0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10,
	0x05, 0x22, 0xcd, 0x02, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x67, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x49, 0x58, 0x45, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x53, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x5f, 0x4b, 0x42, 0x59, 0x54, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x10,
	0x02, 0x22, 0x8a, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x73, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x22, 0x36, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x02, 0x22, 0xdc,
	0x03, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x54, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x63, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x40, 0x0a,
	0x1b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x18, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xe9, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x03, 0x63,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x74, 0x2e, 0x43, 0x75,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x63, 0x75, 0x74, 0x1a, 0x36, 0x0a, 0x08, 0x43,
	0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x80, 0x03, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x50, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x02, 0x74, 0x6f, 0x1a, 0x37, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x35, 0x0a, 0x07, 0x54, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7f, 0x0a, 0x09, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79, 0x22, 0x39, 0x0a, 0x07, 0x4e,
	0x6f, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x08, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x7c, 0x0a, 0x0f, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x09,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3d, 0x0a, 0x05, 0x54, 0x78, 0x6e, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x69, 0x67, 0x68, 0x42, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x68, 0x69, 0x67, 0x68, 0x42, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x77, 0x42, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c,
	0x6f, 0x77, 0x42, 0x69, 0x74, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x6e, 0x49, 0x64, 0x52, 0x05, 0x74,
	0x78, 0x6e, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe3,
	0x01, 0x0a, 0x0a, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78,
	0x6e, 0x49, 0x64, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xc3, 0x01, 0x0a, 0x0e, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a,
	0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x6e, 0x49, 0x64, 0x52, 0x05, 0x74,
	0x78, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x11, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x64, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x1a, 0x76, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x50, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x75, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd7,
	0x02, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x54, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x65, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x68, 0x0a,
	0x0c, 0x6e, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x4b, 0x65,
	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a,
	0x37, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xa4, 0x02, 0x0a, 0x0d, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a,
	0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x46, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22,
	0x80, 0x01, 0x0a, 0x12, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x22, 0xcc, 0x01, 0x0a, 0x13, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x0a,
	0x0b, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x35,
	0x0a, 0x17, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x75, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7b, 0x0a, 0x13, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xcf, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x45, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x58, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75,
	0x74, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc2, 0x01, 0x0a, 0x11, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x51, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x93,
	0x01, 0x0a, 0x0e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7a, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x28, 0x0a, 0x0e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x32, 0xfe, 0x31, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x8c, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x84, 0x01, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x83, 0x01,
	0x0a, 0x0e, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x74, 0x1a, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3c, 0x2e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x12,
	0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x8e, 0x01, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x1e, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x6c, 0x79, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x2e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x1a, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x93, 0x01, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49,
	0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x12, 0x38, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70,
	0x0a, 0x06, 0x67, 0x65, 0x74, 0x55, 0x52, 0x49, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x31, 0x2e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x69,
	0x12, 0x88, 0x01, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x41, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x10,
	0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x74, 0x1a, 0x43, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x11, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x78,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7d, 0x0a, 0x10, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x0f, 0x70, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x81, 0x01, 0x0a, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x7f, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x12, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x11, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x97, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x49,
	0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3b, 0x2e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x14, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x8d, 0x01,
	0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x3d,
	0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x95, 0x01,
	0x0a, 0x17, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46,
	0x72, 0x6f, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72,
	0x6f, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x1a, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x2e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x43, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x97, 0x01, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x19,
	0x6c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x56, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x56, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3,
	0x01, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x45, 0x2e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x56, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x6c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x34, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x9c, 0x01, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x74, 0x12,
	0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x74, 0x1a, 0x40,
	0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x9c, 0x01, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x43, 0x2e, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x96, 0x01, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x43, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39,
	0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x41, 0x2e, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x9c, 0x01, 0x0a,
	0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x43, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x16,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x36, 0x2e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xa4, 0x01, 0x0a, 0x18, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61,
	0x67, 0x12, 0x46, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x61, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2d, 0x48, 0x01, 0x5a,
	0x29, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_controller_client_proto_Controller_proto_rawDescOnce sync.Once
	file_controller_client_proto_Controller_proto_rawDescData = file_controller_client_proto_Controller_proto_rawDesc
)

func file_controller_client_proto_Controller_proto_rawDescGZIP() []byte {
	file_controller_client_proto_Controller_proto_rawDescOnce.Do(func() {
		file_controller_client_proto_Controller_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_client_proto_Controller_proto_rawDescData)
	})
	return file_controller_client_proto_Controller_proto_rawDescData
}

var file_controller_client_proto_Controller_proto_enumTypes = make([]protoimpl.EnumInfo, 27)
var file_controller_client_proto_Controller_proto_msgTypes = make([]protoimpl.MessageInfo, 73)
var file_controller_client_proto_Controller_proto_goTypes = []interface{}{
	(ReaderGroupConfiguration_RetentionType)(0), // 0: io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfiguration.RetentionType
	(ReaderGroupConfigResponse_Status)(0),       // 1: io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfigResponse.Status
	(CreateReaderGroupResponse_Status)(0),       // 2: io.pravega.controller.stream.api.grpc.v1.CreateReaderGroupResponse.Status
	(DeleteReaderGroupStatus_Status)(0),         // 3: io.pravega.controller.stream.api.grpc.v1.DeleteReaderGroupStatus.Status
	(UpdateReaderGroupResponse_Status)(0),       // 4: io.pravega.controller.stream.api.grpc.v1.UpdateReaderGroupResponse.Status
	(CreateKeyValueTableStatus_Status)(0),       // 5: io.pravega.controller.stream.api.grpc.v1.CreateKeyValueTableStatus.Status
	(KeyValueTableConfigResponse_Status)(0),     // 6: io.pravega.controller.stream.api.grpc.v1.KeyValueTableConfigResponse.Status
	(KVTablesInScopeResponse_Status)(0),         // 7: io.pravega.controller.stream.api.grpc.v1.KVTablesInScopeResponse.Status
	(DeleteKVTableStatus_Status)(0),             // 8: io.pravega.controller.stream.api.grpc.v1.DeleteKVTableStatus.Status
	(CreateStreamStatus_Status)(0),              // 9: io.pravega.controller.stream.api.grpc.v1.CreateStreamStatus.Status
	(UpdateStreamStatus_Status)(0),              // 10: io.pravega.controller.stream.api.grpc.v1.UpdateStreamStatus.Status
	(UpdateSubscriberStatus_Status)(0),          // 11: io.pravega.controller.stream.api.grpc.v1.UpdateSubscriberStatus.Status
	(SubscribersResponse_Status)(0),             // 12: io.pravega.controller.stream.api.grpc.v1.SubscribersResponse.Status
	(DeleteStreamStatus_Status)(0),              // 13: io.pravega.controller.stream.api.grpc.v1.DeleteStreamStatus.Status
	(CreateScopeStatus_Status)(0),               // 14: io.pravega.controller.stream.api.grpc.v1.CreateScopeStatus.Status
	(DeleteScopeStatus_Status)(0),               // 15: io.pravega.controller.stream.api.grpc.v1.DeleteScopeStatus.Status
	(TxnStatus_Status)(0),                       // 16: io.pravega.controller.stream.api.grpc.v1.TxnStatus.Status
	(PingTxnStatus_Status)(0),                   // 17: io.pravega.controller.stream.api.grpc.v1.PingTxnStatus.Status
	(TxnState_State)(0),                         // 18: io.pravega.controller.stream.api.grpc.v1.TxnState.State
	(StreamsInScopeResponse_Status)(0),          // 19: io.pravega.controller.stream.api.grpc.v1.StreamsInScopeResponse.Status
	(StreamInfo_AccessOperation)(0),             // 20: io.pravega.controller.stream.api.grpc.v1.StreamInfo.AccessOperation
	(ScalingPolicy_ScalingPolicyType)(0),        // 21: io.pravega.controller.stream.api.grpc.v1.ScalingPolicy.ScalingPolicyType
	(RetentionPolicy_RetentionPolicyType)(0),    // 22: io.pravega.controller.stream.api.grpc.v1.RetentionPolicy.RetentionPolicyType
	(ScaleResponse_ScaleStreamStatus)(0),        // 23: io.pravega.controller.stream.api.grpc.v1.ScaleResponse.ScaleStreamStatus
	(ScaleStatusResponse_ScaleStatus)(0),        // 24: io.pravega.controller.stream.api.grpc.v1.ScaleStatusResponse.ScaleStatus
	(RemoveWriterResponse_Status)(0),            // 25: io.pravega.controller.stream.api.grpc.v1.RemoveWriterResponse.Status
	(TimestampResponse_Status)(0),               // 26: io.pravega.controller.stream.api.grpc.v1.TimestampResponse.Status
	(*ServerRequest)(nil),                       // 27: io.pravega.controller.stream.api.grpc.v1.ServerRequest
	(*ServerResponse)(nil),                      // 28: io.pravega.controller.stream.api.grpc.v1.ServerResponse
	(*ReaderGroupConfiguration)(nil),            // 29: io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfiguration
	(*ReaderGroupConfigResponse)(nil),           // 30: io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfigResponse
	(*ReaderGroupInfo)(nil),                     // 31: io.pravega.controller.stream.api.grpc.v1.ReaderGroupInfo
	(*CreateReaderGroupResponse)(nil),           // 32: io.pravega.controller.stream.api.grpc.v1.CreateReaderGroupResponse
	(*DeleteReaderGroupStatus)(nil),             // 33: io.pravega.controller.stream.api.grpc.v1.DeleteReaderGroupStatus
	(*UpdateReaderGroupResponse)(nil),           // 34: io.pravega.controller.stream.api.grpc.v1.UpdateReaderGroupResponse
	(*CreateKeyValueTableStatus)(nil),           // 35: io.pravega.controller.stream.api.grpc.v1.CreateKeyValueTableStatus
	(*KeyValueTableConfig)(nil),                 // 36: io.pravega.controller.stream.api.grpc.v1.KeyValueTableConfig
	(*KeyValueTableConfigResponse)(nil),         // 37: io.pravega.controller.stream.api.grpc.v1.KeyValueTableConfigResponse
	(*KeyValueTableInfo)(nil),                   // 38: io.pravega.controller.stream.api.grpc.v1.KeyValueTableInfo
	(*KVTablesInScopeRequest)(nil),              // 39: io.pravega.controller.stream.api.grpc.v1.KVTablesInScopeRequest
	(*KVTablesInScopeResponse)(nil),             // 40: io.pravega.controller.stream.api.grpc.v1.KVTablesInScopeResponse
	(*DeleteKVTableStatus)(nil),                 // 41: io.pravega.controller.stream.api.grpc.v1.DeleteKVTableStatus
	(*CreateStreamStatus)(nil),                  // 42: io.pravega.controller.stream.api.grpc.v1.CreateStreamStatus
	(*UpdateStreamStatus)(nil),                  // 43: io.pravega.controller.stream.api.grpc.v1.UpdateStreamStatus
	(*UpdateSubscriberStatus)(nil),              // 44: io.pravega.controller.stream.api.grpc.v1.UpdateSubscriberStatus
	(*StreamSubscriberInfo)(nil),                // 45: io.pravega.controller.stream.api.grpc.v1.StreamSubscriberInfo
	(*SubscriberStreamCut)(nil),                 // 46: io.pravega.controller.stream.api.grpc.v1.SubscriberStreamCut
	(*SubscribersResponse)(nil),                 // 47: io.pravega.controller.stream.api.grpc.v1.SubscribersResponse
	(*DeleteStreamStatus)(nil),                  // 48: io.pravega.controller.stream.api.grpc.v1.DeleteStreamStatus
	(*CreateScopeStatus)(nil),                   // 49: io.pravega.controller.stream.api.grpc.v1.CreateScopeStatus
	(*DeleteScopeStatus)(nil),                   // 50: io.pravega.controller.stream.api.grpc.v1.DeleteScopeStatus
	(*TxnStatus)(nil),                           // 51: io.pravega.controller.stream.api.grpc.v1.TxnStatus
	(*PingTxnStatus)(nil),                       // 52: io.pravega.controller.stream.api.grpc.v1.PingTxnStatus
	(*TxnState)(nil),                            // 53: io.pravega.controller.stream.api.grpc.v1.TxnState
	(*ScopeInfo)(nil),                           // 54: io.pravega.controller.stream.api.grpc.v1.ScopeInfo
	(*ContinuationToken)(nil),                   // 55: io.pravega.controller.stream.api.grpc.v1.ContinuationToken
	(*StreamsInScopeRequest)(nil),               // 56: io.pravega.controller.stream.api.grpc.v1.StreamsInScopeRequest
	(*StreamsInScopeWithTagRequest)(nil),        // 57: io.pravega.controller.stream.api.grpc.v1.StreamsInScopeWithTagRequest
	(*StreamsInScopeResponse)(nil),              // 58: io.pravega.controller.stream.api.grpc.v1.StreamsInScopeResponse
	(*StreamInfo)(nil),                          // 59: io.pravega.controller.stream.api.grpc.v1.StreamInfo
	(*ScalingPolicy)(nil),                       // 60: io.pravega.controller.stream.api.grpc.v1.ScalingPolicy
	(*RetentionPolicy)(nil),                     // 61: io.pravega.controller.stream.api.grpc.v1.RetentionPolicy
	(*StreamConfig)(nil),                        // 62: io.pravega.controller.stream.api.grpc.v1.StreamConfig
	(*Tags)(nil),                                // 63: io.pravega.controller.stream.api.grpc.v1.Tags
	(*StreamCut)(nil),                           // 64: io.pravega.controller.stream.api.grpc.v1.StreamCut
	(*StreamCutRange)(nil),                      // 65: io.pravega.controller.stream.api.grpc.v1.StreamCutRange
	(*SegmentId)(nil),                           // 66: io.pravega.controller.stream.api.grpc.v1.SegmentId
	(*SegmentRange)(nil),                        // 67: io.pravega.controller.stream.api.grpc.v1.SegmentRange
	(*NodeUri)(nil),                             // 68: io.pravega.controller.stream.api.grpc.v1.NodeUri
	(*SegmentsAtTime)(nil),                      // 69: io.pravega.controller.stream.api.grpc.v1.SegmentsAtTime
	(*TxnId)(nil),                               // 70: io.pravega.controller.stream.api.grpc.v1.TxnId
	(*CreateTxnRequest)(nil),                    // 71: io.pravega.controller.stream.api.grpc.v1.CreateTxnRequest
	(*CreateTxnResponse)(nil),                   // 72: io.pravega.controller.stream.api.grpc.v1.CreateTxnResponse
	(*TxnRequest)(nil),                          // 73: io.pravega.controller.stream.api.grpc.v1.TxnRequest
	(*PingTxnRequest)(nil),                      // 74: io.pravega.controller.stream.api.grpc.v1.PingTxnRequest
	(*SuccessorResponse)(nil),                   // 75: io.pravega.controller.stream.api.grpc.v1.SuccessorResponse
	(*StreamCutRangeResponse)(nil),              // 76: io.pravega.controller.stream.api.grpc.v1.StreamCutRangeResponse
	(*ScaleRequest)(nil),                        // 77: io.pravega.controller.stream.api.grpc.v1.ScaleRequest
	(*ScaleResponse)(nil),                       // 78: io.pravega.controller.stream.api.grpc.v1.ScaleResponse
	(*ScaleStatusRequest)(nil),                  // 79: io.pravega.controller.stream.api.grpc.v1.ScaleStatusRequest
	(*ScaleStatusResponse)(nil),                 // 80: io.pravega.controller.stream.api.grpc.v1.ScaleStatusResponse
	(*SegmentRanges)(nil),                       // 81: io.pravega.controller.stream.api.grpc.v1.SegmentRanges
	(*GetSegmentsRequest)(nil),                  // 82: io.pravega.controller.stream.api.grpc.v1.GetSegmentsRequest
	(*GetEpochSegmentsRequest)(nil),             // 83: io.pravega.controller.stream.api.grpc.v1.GetEpochSegmentsRequest
	(*SegmentValidityResponse)(nil),             // 84: io.pravega.controller.stream.api.grpc.v1.SegmentValidityResponse
	(*StreamCutValidityResponse)(nil),           // 85: io.pravega.controller.stream.api.grpc.v1.StreamCutValidityResponse
	(*DelegationToken)(nil),                     // 86: io.pravega.controller.stream.api.grpc.v1.DelegationToken
	(*RemoveWriterRequest)(nil),                 // 87: io.pravega.controller.stream.api.grpc.v1.RemoveWriterRequest
	(*RemoveWriterResponse)(nil),                // 88: io.pravega.controller.stream.api.grpc.v1.RemoveWriterResponse
	(*TimestampFromWriter)(nil),                 // 89: io.pravega.controller.stream.api.grpc.v1.TimestampFromWriter
	(*TimestampResponse)(nil),                   // 90: io.pravega.controller.stream.api.grpc.v1.TimestampResponse
	(*ScopesResponse)(nil),                      // 91: io.pravega.controller.stream.api.grpc.v1.ScopesResponse
	(*ScopesRequest)(nil),                       // 92: io.pravega.controller.stream.api.grpc.v1.ScopesRequest
	(*ExistsResponse)(nil),                      // 93: io.pravega.controller.stream.api.grpc.v1.ExistsResponse
	nil,                                         // 94: io.pravega.controller.stream.api.grpc.v1.StreamCut.CutEntry
	nil,                                         // 95: io.pravega.controller.stream.api.grpc.v1.StreamCutRange.FromEntry
	nil,                                         // 96: io.pravega.controller.stream.api.grpc.v1.StreamCutRange.ToEntry
	(*SegmentsAtTime_SegmentLocation)(nil),      // 97: io.pravega.controller.stream.api.grpc.v1.SegmentsAtTime.SegmentLocation
	(*SuccessorResponse_SegmentEntry)(nil),      // 98: io.pravega.controller.stream.api.grpc.v1.SuccessorResponse.SegmentEntry
	(*ScaleRequest_KeyRangeEntry)(nil),          // 99: io.pravega.controller.stream.api.grpc.v1.ScaleRequest.KeyRangeEntry
}
var file_controller_client_proto_Controller_proto_depIdxs = []int32{
	68,  // 0: io.pravega.controller.stream.api.grpc.v1.ServerResponse.nodeURI:type_name -> io.pravega.controller.stream.api.grpc.v1.NodeUri
	64,  // 1: io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfiguration.startingStreamCuts:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamCut
	64,  // 2: io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfiguration.endingStreamCuts:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamCut
	29,  // 3: io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfigResponse.config:type_name -> io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfiguration
	1,   // 4: io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfigResponse.status:type_name -> io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfigResponse.Status
	2,   // 5: io.pravega.controller.stream.api.grpc.v1.CreateReaderGroupResponse.status:type_name -> io.pravega.controller.stream.api.grpc.v1.CreateReaderGroupResponse.Status
	29,  // 6: io.pravega.controller.stream.api.grpc.v1.CreateReaderGroupResponse.config:type_name -> io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfiguration
	3,   // 7: io.pravega.controller.stream.api.grpc.v1.DeleteReaderGroupStatus.status:type_name -> io.pravega.controller.stream.api.grpc.v1.DeleteReaderGroupStatus.Status
	4,   // 8: io.pravega.controller.stream.api.grpc.v1.UpdateReaderGroupResponse.status:type_name -> io.pravega.controller.stream.api.grpc.v1.UpdateReaderGroupResponse.Status
	5,   // 9: io.pravega.controller.stream.api.grpc.v1.CreateKeyValueTableStatus.status:type_name -> io.pravega.controller.stream.api.grpc.v1.CreateKeyValueTableStatus.Status
	36,  // 10: io.pravega.controller.stream.api.grpc.v1.KeyValueTableConfigResponse.config:type_name -> io.pravega.controller.stream.api.grpc.v1.KeyValueTableConfig
	6,   // 11: io.pravega.controller.stream.api.grpc.v1.KeyValueTableConfigResponse.status:type_name -> io.pravega.controller.stream.api.grpc.v1.KeyValueTableConfigResponse.Status
	54,  // 12: io.pravega.controller.stream.api.grpc.v1.KVTablesInScopeRequest.scope:type_name -> io.pravega.controller.stream.api.grpc.v1.ScopeInfo
	55,  // 13: io.pravega.controller.stream.api.grpc.v1.KVTablesInScopeRequest.continuationToken:type_name -> io.pravega.controller.stream.api.grpc.v1.ContinuationToken
	38,  // 14: io.pravega.controller.stream.api.grpc.v1.KVTablesInScopeResponse.kvtables:type_name -> io.pravega.controller.stream.api.grpc.v1.KeyValueTableInfo
	55,  // 15: io.pravega.controller.stream.api.grpc.v1.KVTablesInScopeResponse.continuationToken:type_name -> io.pravega.controller.stream.api.grpc.v1.ContinuationToken
	7,   // 16: io.pravega.controller.stream.api.grpc.v1.KVTablesInScopeResponse.status:type_name -> io.pravega.controller.stream.api.grpc.v1.KVTablesInScopeResponse.Status
	8,   // 17: io.pravega.controller.stream.api.grpc.v1.DeleteKVTableStatus.status:type_name -> io.pravega.controller.stream.api.grpc.v1.DeleteKVTableStatus.Status
	9,   // 18: io.pravega.controller.stream.api.grpc.v1.CreateStreamStatus.status:type_name -> io.pravega.controller.stream.api.grpc.v1.CreateStreamStatus.Status
	10,  // 19: io.pravega.controller.stream.api.grpc.v1.UpdateStreamStatus.status:type_name -> io.pravega.controller.stream.api.grpc.v1.UpdateStreamStatus.Status
	11,  // 20: io.pravega.controller.stream.api.grpc.v1.UpdateSubscriberStatus.status:type_name -> io.pravega.controller.stream.api.grpc.v1.UpdateSubscriberStatus.Status
	64,  // 21: io.pravega.controller.stream.api.grpc.v1.SubscriberStreamCut.streamCut:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamCut
	12,  // 22: io.pravega.controller.stream.api.grpc.v1.SubscribersResponse.status:type_name -> io.pravega.controller.stream.api.grpc.v1.SubscribersResponse.Status
	13,  // 23: io.pravega.controller.stream.api.grpc.v1.DeleteStreamStatus.status:type_name -> io.pravega.controller.stream.api.grpc.v1.DeleteStreamStatus.Status
	14,  // 24: io.pravega.controller.stream.api.grpc.v1.CreateScopeStatus.status:type_name -> io.pravega.controller.stream.api.grpc.v1.CreateScopeStatus.Status
	15,  // 25: io.pravega.controller.stream.api.grpc.v1.DeleteScopeStatus.status:type_name -> io.pravega.controller.stream.api.grpc.v1.DeleteScopeStatus.Status
	16,  // 26: io.pravega.controller.stream.api.grpc.v1.TxnStatus.status:type_name -> io.pravega.controller.stream.api.grpc.v1.TxnStatus.Status
	17,  // 27: io.pravega.controller.stream.api.grpc.v1.PingTxnStatus.status:type_name -> io.pravega.controller.stream.api.grpc.v1.PingTxnStatus.Status
	18,  // 28: io.pravega.controller.stream.api.grpc.v1.TxnState.state:type_name -> io.pravega.controller.stream.api.grpc.v1.TxnState.State
	54,  // 29: io.pravega.controller.stream.api.grpc.v1.StreamsInScopeRequest.scope:type_name -> io.pravega.controller.stream.api.grpc.v1.ScopeInfo
	55,  // 30: io.pravega.controller.stream.api.grpc.v1.StreamsInScopeRequest.continuationToken:type_name -> io.pravega.controller.stream.api.grpc.v1.ContinuationToken
	54,  // 31: io.pravega.controller.stream.api.grpc.v1.StreamsInScopeWithTagRequest.scope:type_name -> io.pravega.controller.stream.api.grpc.v1.ScopeInfo
	55,  // 32: io.pravega.controller.stream.api.grpc.v1.StreamsInScopeWithTagRequest.continuationToken:type_name -> io.pravega.controller.stream.api.grpc.v1.ContinuationToken
	59,  // 33: io.pravega.controller.stream.api.grpc.v1.StreamsInScopeResponse.streams:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	55,  // 34: io.pravega.controller.stream.api.grpc.v1.StreamsInScopeResponse.continuationToken:type_name -> io.pravega.controller.stream.api.grpc.v1.ContinuationToken
	19,  // 35: io.pravega.controller.stream.api.grpc.v1.StreamsInScopeResponse.status:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamsInScopeResponse.Status
	20,  // 36: io.pravega.controller.stream.api.grpc.v1.StreamInfo.accessOperation:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo.AccessOperation
	21,  // 37: io.pravega.controller.stream.api.grpc.v1.ScalingPolicy.scaleType:type_name -> io.pravega.controller.stream.api.grpc.v1.ScalingPolicy.ScalingPolicyType
	22,  // 38: io.pravega.controller.stream.api.grpc.v1.RetentionPolicy.retentionType:type_name -> io.pravega.controller.stream.api.grpc.v1.RetentionPolicy.RetentionPolicyType
	59,  // 39: io.pravega.controller.stream.api.grpc.v1.StreamConfig.streamInfo:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	60,  // 40: io.pravega.controller.stream.api.grpc.v1.StreamConfig.scalingPolicy:type_name -> io.pravega.controller.stream.api.grpc.v1.ScalingPolicy
	61,  // 41: io.pravega.controller.stream.api.grpc.v1.StreamConfig.retentionPolicy:type_name -> io.pravega.controller.stream.api.grpc.v1.RetentionPolicy
	63,  // 42: io.pravega.controller.stream.api.grpc.v1.StreamConfig.tags:type_name -> io.pravega.controller.stream.api.grpc.v1.Tags
	59,  // 43: io.pravega.controller.stream.api.grpc.v1.StreamCut.streamInfo:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	94,  // 44: io.pravega.controller.stream.api.grpc.v1.StreamCut.cut:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamCut.CutEntry
	59,  // 45: io.pravega.controller.stream.api.grpc.v1.StreamCutRange.streamInfo:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	95,  // 46: io.pravega.controller.stream.api.grpc.v1.StreamCutRange.from:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamCutRange.FromEntry
	96,  // 47: io.pravega.controller.stream.api.grpc.v1.StreamCutRange.to:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamCutRange.ToEntry
	59,  // 48: io.pravega.controller.stream.api.grpc.v1.SegmentId.streamInfo:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	66,  // 49: io.pravega.controller.stream.api.grpc.v1.SegmentRange.segmentId:type_name -> io.pravega.controller.stream.api.grpc.v1.SegmentId
	97,  // 50: io.pravega.controller.stream.api.grpc.v1.SegmentsAtTime.segments:type_name -> io.pravega.controller.stream.api.grpc.v1.SegmentsAtTime.SegmentLocation
	59,  // 51: io.pravega.controller.stream.api.grpc.v1.CreateTxnRequest.streamInfo:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	70,  // 52: io.pravega.controller.stream.api.grpc.v1.CreateTxnResponse.txnId:type_name -> io.pravega.controller.stream.api.grpc.v1.TxnId
	67,  // 53: io.pravega.controller.stream.api.grpc.v1.CreateTxnResponse.activeSegments:type_name -> io.pravega.controller.stream.api.grpc.v1.SegmentRange
	59,  // 54: io.pravega.controller.stream.api.grpc.v1.TxnRequest.streamInfo:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	70,  // 55: io.pravega.controller.stream.api.grpc.v1.TxnRequest.txnId:type_name -> io.pravega.controller.stream.api.grpc.v1.TxnId
	59,  // 56: io.pravega.controller.stream.api.grpc.v1.PingTxnRequest.streamInfo:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	70,  // 57: io.pravega.controller.stream.api.grpc.v1.PingTxnRequest.txnId:type_name -> io.pravega.controller.stream.api.grpc.v1.TxnId
	98,  // 58: io.pravega.controller.stream.api.grpc.v1.SuccessorResponse.segments:type_name -> io.pravega.controller.stream.api.grpc.v1.SuccessorResponse.SegmentEntry
	66,  // 59: io.pravega.controller.stream.api.grpc.v1.StreamCutRangeResponse.segments:type_name -> io.pravega.controller.stream.api.grpc.v1.SegmentId
	59,  // 60: io.pravega.controller.stream.api.grpc.v1.ScaleRequest.streamInfo:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	99,  // 61: io.pravega.controller.stream.api.grpc.v1.ScaleRequest.newKeyRanges:type_name -> io.pravega.controller.stream.api.grpc.v1.ScaleRequest.KeyRangeEntry
	23,  // 62: io.pravega.controller.stream.api.grpc.v1.ScaleResponse.status:type_name -> io.pravega.controller.stream.api.grpc.v1.ScaleResponse.ScaleStreamStatus
	67,  // 63: io.pravega.controller.stream.api.grpc.v1.ScaleResponse.segments:type_name -> io.pravega.controller.stream.api.grpc.v1.SegmentRange
	59,  // 64: io.pravega.controller.stream.api.grpc.v1.ScaleStatusRequest.streamInfo:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	24,  // 65: io.pravega.controller.stream.api.grpc.v1.ScaleStatusResponse.status:type_name -> io.pravega.controller.stream.api.grpc.v1.ScaleStatusResponse.ScaleStatus
	67,  // 66: io.pravega.controller.stream.api.grpc.v1.SegmentRanges.segmentRanges:type_name -> io.pravega.controller.stream.api.grpc.v1.SegmentRange
	59,  // 67: io.pravega.controller.stream.api.grpc.v1.GetSegmentsRequest.streamInfo:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	59,  // 68: io.pravega.controller.stream.api.grpc.v1.GetEpochSegmentsRequest.streamInfo:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	59,  // 69: io.pravega.controller.stream.api.grpc.v1.RemoveWriterRequest.stream:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	25,  // 70: io.pravega.controller.stream.api.grpc.v1.RemoveWriterResponse.result:type_name -> io.pravega.controller.stream.api.grpc.v1.RemoveWriterResponse.Status
	64,  // 71: io.pravega.controller.stream.api.grpc.v1.TimestampFromWriter.position:type_name -> io.pravega.controller.stream.api.grpc.v1.StreamCut
	26,  // 72: io.pravega.controller.stream.api.grpc.v1.TimestampResponse.result:type_name -> io.pravega.controller.stream.api.grpc.v1.TimestampResponse.Status
	55,  // 73: io.pravega.controller.stream.api.grpc.v1.ScopesResponse.continuationToken:type_name -> io.pravega.controller.stream.api.grpc.v1.ContinuationToken
	55,  // 74: io.pravega.controller.stream.api.grpc.v1.ScopesRequest.continuationToken:type_name -> io.pravega.controller.stream.api.grpc.v1.ContinuationToken
	66,  // 75: io.pravega.controller.stream.api.grpc.v1.SegmentsAtTime.SegmentLocation.segmentId:type_name -> io.pravega.controller.stream.api.grpc.v1.SegmentId
	67,  // 76: io.pravega.controller.stream.api.grpc.v1.SuccessorResponse.SegmentEntry.segment:type_name -> io.pravega.controller.stream.api.grpc.v1.SegmentRange
	27,  // 77: io.pravega.controller.stream.api.grpc.v1.ControllerService.getControllerServerList:input_type -> io.pravega.controller.stream.api.grpc.v1.ServerRequest
	62,  // 78: io.pravega.controller.stream.api.grpc.v1.ControllerService.createStream:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamConfig
	62,  // 79: io.pravega.controller.stream.api.grpc.v1.ControllerService.updateStream:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamConfig
	64,  // 80: io.pravega.controller.stream.api.grpc.v1.ControllerService.truncateStream:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamCut
	59,  // 81: io.pravega.controller.stream.api.grpc.v1.ControllerService.sealStream:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	59,  // 82: io.pravega.controller.stream.api.grpc.v1.ControllerService.deleteStream:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	59,  // 83: io.pravega.controller.stream.api.grpc.v1.ControllerService.getCurrentSegments:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	83,  // 84: io.pravega.controller.stream.api.grpc.v1.ControllerService.getEpochSegments:input_type -> io.pravega.controller.stream.api.grpc.v1.GetEpochSegmentsRequest
	82,  // 85: io.pravega.controller.stream.api.grpc.v1.ControllerService.getSegments:input_type -> io.pravega.controller.stream.api.grpc.v1.GetSegmentsRequest
	66,  // 86: io.pravega.controller.stream.api.grpc.v1.ControllerService.getSegmentsImmediatlyFollowing:input_type -> io.pravega.controller.stream.api.grpc.v1.SegmentId
	66,  // 87: io.pravega.controller.stream.api.grpc.v1.ControllerService.getSegmentsImmediatelyFollowing:input_type -> io.pravega.controller.stream.api.grpc.v1.SegmentId
	65,  // 88: io.pravega.controller.stream.api.grpc.v1.ControllerService.getSegmentsBetween:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamCutRange
	77,  // 89: io.pravega.controller.stream.api.grpc.v1.ControllerService.scale:input_type -> io.pravega.controller.stream.api.grpc.v1.ScaleRequest
	79,  // 90: io.pravega.controller.stream.api.grpc.v1.ControllerService.checkScale:input_type -> io.pravega.controller.stream.api.grpc.v1.ScaleStatusRequest
	66,  // 91: io.pravega.controller.stream.api.grpc.v1.ControllerService.getURI:input_type -> io.pravega.controller.stream.api.grpc.v1.SegmentId
	66,  // 92: io.pravega.controller.stream.api.grpc.v1.ControllerService.isSegmentValid:input_type -> io.pravega.controller.stream.api.grpc.v1.SegmentId
	64,  // 93: io.pravega.controller.stream.api.grpc.v1.ControllerService.isStreamCutValid:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamCut
	71,  // 94: io.pravega.controller.stream.api.grpc.v1.ControllerService.createTransaction:input_type -> io.pravega.controller.stream.api.grpc.v1.CreateTxnRequest
	73,  // 95: io.pravega.controller.stream.api.grpc.v1.ControllerService.commitTransaction:input_type -> io.pravega.controller.stream.api.grpc.v1.TxnRequest
	73,  // 96: io.pravega.controller.stream.api.grpc.v1.ControllerService.abortTransaction:input_type -> io.pravega.controller.stream.api.grpc.v1.TxnRequest
	74,  // 97: io.pravega.controller.stream.api.grpc.v1.ControllerService.pingTransaction:input_type -> io.pravega.controller.stream.api.grpc.v1.PingTxnRequest
	73,  // 98: io.pravega.controller.stream.api.grpc.v1.ControllerService.checkTransactionState:input_type -> io.pravega.controller.stream.api.grpc.v1.TxnRequest
	54,  // 99: io.pravega.controller.stream.api.grpc.v1.ControllerService.createScope:input_type -> io.pravega.controller.stream.api.grpc.v1.ScopeInfo
	92,  // 100: io.pravega.controller.stream.api.grpc.v1.ControllerService.listScopes:input_type -> io.pravega.controller.stream.api.grpc.v1.ScopesRequest
	54,  // 101: io.pravega.controller.stream.api.grpc.v1.ControllerService.checkScopeExists:input_type -> io.pravega.controller.stream.api.grpc.v1.ScopeInfo
	59,  // 102: io.pravega.controller.stream.api.grpc.v1.ControllerService.checkStreamExists:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	56,  // 103: io.pravega.controller.stream.api.grpc.v1.ControllerService.listStreamsInScope:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamsInScopeRequest
	54,  // 104: io.pravega.controller.stream.api.grpc.v1.ControllerService.deleteScope:input_type -> io.pravega.controller.stream.api.grpc.v1.ScopeInfo
	54,  // 105: io.pravega.controller.stream.api.grpc.v1.ControllerService.deleteScopeRecursive:input_type -> io.pravega.controller.stream.api.grpc.v1.ScopeInfo
	59,  // 106: io.pravega.controller.stream.api.grpc.v1.ControllerService.getDelegationToken:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	87,  // 107: io.pravega.controller.stream.api.grpc.v1.ControllerService.removeWriter:input_type -> io.pravega.controller.stream.api.grpc.v1.RemoveWriterRequest
	89,  // 108: io.pravega.controller.stream.api.grpc.v1.ControllerService.noteTimestampFromWriter:input_type -> io.pravega.controller.stream.api.grpc.v1.TimestampFromWriter
	36,  // 109: io.pravega.controller.stream.api.grpc.v1.ControllerService.createKeyValueTable:input_type -> io.pravega.controller.stream.api.grpc.v1.KeyValueTableConfig
	38,  // 110: io.pravega.controller.stream.api.grpc.v1.ControllerService.getCurrentSegmentsKeyValueTable:input_type -> io.pravega.controller.stream.api.grpc.v1.KeyValueTableInfo
	39,  // 111: io.pravega.controller.stream.api.grpc.v1.ControllerService.listKeyValueTablesInScope:input_type -> io.pravega.controller.stream.api.grpc.v1.KVTablesInScopeRequest
	38,  // 112: io.pravega.controller.stream.api.grpc.v1.ControllerService.getKeyValueTableConfiguration:input_type -> io.pravega.controller.stream.api.grpc.v1.KeyValueTableInfo
	38,  // 113: io.pravega.controller.stream.api.grpc.v1.ControllerService.deleteKeyValueTable:input_type -> io.pravega.controller.stream.api.grpc.v1.KeyValueTableInfo
	59,  // 114: io.pravega.controller.stream.api.grpc.v1.ControllerService.listSubscribers:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	46,  // 115: io.pravega.controller.stream.api.grpc.v1.ControllerService.updateSubscriberStreamCut:input_type -> io.pravega.controller.stream.api.grpc.v1.SubscriberStreamCut
	29,  // 116: io.pravega.controller.stream.api.grpc.v1.ControllerService.createReaderGroup:input_type -> io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfiguration
	31,  // 117: io.pravega.controller.stream.api.grpc.v1.ControllerService.getReaderGroupConfig:input_type -> io.pravega.controller.stream.api.grpc.v1.ReaderGroupInfo
	31,  // 118: io.pravega.controller.stream.api.grpc.v1.ControllerService.deleteReaderGroup:input_type -> io.pravega.controller.stream.api.grpc.v1.ReaderGroupInfo
	29,  // 119: io.pravega.controller.stream.api.grpc.v1.ControllerService.updateReaderGroup:input_type -> io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfiguration
	59,  // 120: io.pravega.controller.stream.api.grpc.v1.ControllerService.getStreamConfiguration:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamInfo
	57,  // 121: io.pravega.controller.stream.api.grpc.v1.ControllerService.listStreamsInScopeForTag:input_type -> io.pravega.controller.stream.api.grpc.v1.StreamsInScopeWithTagRequest
	28,  // 122: io.pravega.controller.stream.api.grpc.v1.ControllerService.getControllerServerList:output_type -> io.pravega.controller.stream.api.grpc.v1.ServerResponse
	42,  // 123: io.pravega.controller.stream.api.grpc.v1.ControllerService.createStream:output_type -> io.pravega.controller.stream.api.grpc.v1.CreateStreamStatus
	43,  // 124: io.pravega.controller.stream.api.grpc.v1.ControllerService.updateStream:output_type -> io.pravega.controller.stream.api.grpc.v1.UpdateStreamStatus
	43,  // 125: io.pravega.controller.stream.api.grpc.v1.ControllerService.truncateStream:output_type -> io.pravega.controller.stream.api.grpc.v1.UpdateStreamStatus
	43,  // 126: io.pravega.controller.stream.api.grpc.v1.ControllerService.sealStream:output_type -> io.pravega.controller.stream.api.grpc.v1.UpdateStreamStatus
	48,  // 127: io.pravega.controller.stream.api.grpc.v1.ControllerService.deleteStream:output_type -> io.pravega.controller.stream.api.grpc.v1.DeleteStreamStatus
	81,  // 128: io.pravega.controller.stream.api.grpc.v1.ControllerService.getCurrentSegments:output_type -> io.pravega.controller.stream.api.grpc.v1.SegmentRanges
	81,  // 129: io.pravega.controller.stream.api.grpc.v1.ControllerService.getEpochSegments:output_type -> io.pravega.controller.stream.api.grpc.v1.SegmentRanges
	69,  // 130: io.pravega.controller.stream.api.grpc.v1.ControllerService.getSegments:output_type -> io.pravega.controller.stream.api.grpc.v1.SegmentsAtTime
	75,  // 131: io.pravega.controller.stream.api.grpc.v1.ControllerService.getSegmentsImmediatlyFollowing:output_type -> io.pravega.controller.stream.api.grpc.v1.SuccessorResponse
	75,  // 132: io.pravega.controller.stream.api.grpc.v1.ControllerService.getSegmentsImmediatelyFollowing:output_type -> io.pravega.controller.stream.api.grpc.v1.SuccessorResponse
	76,  // 133: io.pravega.controller.stream.api.grpc.v1.ControllerService.getSegmentsBetween:output_type -> io.pravega.controller.stream.api.grpc.v1.StreamCutRangeResponse
	78,  // 134: io.pravega.controller.stream.api.grpc.v1.ControllerService.scale:output_type -> io.pravega.controller.stream.api.grpc.v1.ScaleResponse
	80,  // 135: io.pravega.controller.stream.api.grpc.v1.ControllerService.checkScale:output_type -> io.pravega.controller.stream.api.grpc.v1.ScaleStatusResponse
	68,  // 136: io.pravega.controller.stream.api.grpc.v1.ControllerService.getURI:output_type -> io.pravega.controller.stream.api.grpc.v1.NodeUri
	84,  // 137: io.pravega.controller.stream.api.grpc.v1.ControllerService.isSegmentValid:output_type -> io.pravega.controller.stream.api.grpc.v1.SegmentValidityResponse
	85,  // 138: io.pravega.controller.stream.api.grpc.v1.ControllerService.isStreamCutValid:output_type -> io.pravega.controller.stream.api.grpc.v1.StreamCutValidityResponse
	72,  // 139: io.pravega.controller.stream.api.grpc.v1.ControllerService.createTransaction:output_type -> io.pravega.controller.stream.api.grpc.v1.CreateTxnResponse
	51,  // 140: io.pravega.controller.stream.api.grpc.v1.ControllerService.commitTransaction:output_type -> io.pravega.controller.stream.api.grpc.v1.TxnStatus
	51,  // 141: io.pravega.controller.stream.api.grpc.v1.ControllerService.abortTransaction:output_type -> io.pravega.controller.stream.api.grpc.v1.TxnStatus
	52,  // 142: io.pravega.controller.stream.api.grpc.v1.ControllerService.pingTransaction:output_type -> io.pravega.controller.stream.api.grpc.v1.PingTxnStatus
	53,  // 143: io.pravega.controller.stream.api.grpc.v1.ControllerService.checkTransactionState:output_type -> io.pravega.controller.stream.api.grpc.v1.TxnState
	49,  // 144: io.pravega.controller.stream.api.grpc.v1.ControllerService.createScope:output_type -> io.pravega.controller.stream.api.grpc.v1.CreateScopeStatus
	91,  // 145: io.pravega.controller.stream.api.grpc.v1.ControllerService.listScopes:output_type -> io.pravega.controller.stream.api.grpc.v1.ScopesResponse
	93,  // 146: io.pravega.controller.stream.api.grpc.v1.ControllerService.checkScopeExists:output_type -> io.pravega.controller.stream.api.grpc.v1.ExistsResponse
	93,  // 147: io.pravega.controller.stream.api.grpc.v1.ControllerService.checkStreamExists:output_type -> io.pravega.controller.stream.api.grpc.v1.ExistsResponse
	58,  // 148: io.pravega.controller.stream.api.grpc.v1.ControllerService.listStreamsInScope:output_type -> io.pravega.controller.stream.api.grpc.v1.StreamsInScopeResponse
	50,  // 149: io.pravega.controller.stream.api.grpc.v1.ControllerService.deleteScope:output_type -> io.pravega.controller.stream.api.grpc.v1.DeleteScopeStatus
	50,  // 150: io.pravega.controller.stream.api.grpc.v1.ControllerService.deleteScopeRecursive:output_type -> io.pravega.controller.stream.api.grpc.v1.DeleteScopeStatus
	86,  // 151: io.pravega.controller.stream.api.grpc.v1.ControllerService.getDelegationToken:output_type -> io.pravega.controller.stream.api.grpc.v1.DelegationToken
	88,  // 152: io.pravega.controller.stream.api.grpc.v1.ControllerService.removeWriter:output_type -> io.pravega.controller.stream.api.grpc.v1.RemoveWriterResponse
	90,  // 153: io.pravega.controller.stream.api.grpc.v1.ControllerService.noteTimestampFromWriter:output_type -> io.pravega.controller.stream.api.grpc.v1.TimestampResponse
	35,  // 154: io.pravega.controller.stream.api.grpc.v1.ControllerService.createKeyValueTable:output_type -> io.pravega.controller.stream.api.grpc.v1.CreateKeyValueTableStatus
	81,  // 155: io.pravega.controller.stream.api.grpc.v1.ControllerService.getCurrentSegmentsKeyValueTable:output_type -> io.pravega.controller.stream.api.grpc.v1.SegmentRanges
	40,  // 156: io.pravega.controller.stream.api.grpc.v1.ControllerService.listKeyValueTablesInScope:output_type -> io.pravega.controller.stream.api.grpc.v1.KVTablesInScopeResponse
	37,  // 157: io.pravega.controller.stream.api.grpc.v1.ControllerService.getKeyValueTableConfiguration:output_type -> io.pravega.controller.stream.api.grpc.v1.KeyValueTableConfigResponse
	41,  // 158: io.pravega.controller.stream.api.grpc.v1.ControllerService.deleteKeyValueTable:output_type -> io.pravega.controller.stream.api.grpc.v1.DeleteKVTableStatus
	47,  // 159: io.pravega.controller.stream.api.grpc.v1.ControllerService.listSubscribers:output_type -> io.pravega.controller.stream.api.grpc.v1.SubscribersResponse
	44,  // 160: io.pravega.controller.stream.api.grpc.v1.ControllerService.updateSubscriberStreamCut:output_type -> io.pravega.controller.stream.api.grpc.v1.UpdateSubscriberStatus
	32,  // 161: io.pravega.controller.stream.api.grpc.v1.ControllerService.createReaderGroup:output_type -> io.pravega.controller.stream.api.grpc.v1.CreateReaderGroupResponse
	30,  // 162: io.pravega.controller.stream.api.grpc.v1.ControllerService.getReaderGroupConfig:output_type -> io.pravega.controller.stream.api.grpc.v1.ReaderGroupConfigResponse
	33,  // 163: io.pravega.controller.stream.api.grpc.v1.ControllerService.deleteReaderGroup:output_type -> io.pravega.controller.stream.api.grpc.v1.DeleteReaderGroupStatus
	34,  // 164: io.pravega.controller.stream.api.grpc.v1.ControllerService.updateReaderGroup:output_type -> io.pravega.controller.stream.api.grpc.v1.UpdateReaderGroupResponse
	62,  // 165: io.pravega.controller.stream.api.grpc.v1.ControllerService.getStreamConfiguration:output_type -> io.pravega.controller.stream.api.grpc.v1.StreamConfig
	58,  // 166: io.pravega.controller.stream.api.grpc.v1.ControllerService.listStreamsInScopeForTag:output_type -> io.pravega.controller.stream.api.grpc.v1.StreamsInScopeResponse
	122, // [122:167] is the sub-list for method output_type
	77,  // [77:122] is the sub-list for method input_type
	77,  // [77:77] is the sub-list for extension type_name
	77,  // [77:77] is the sub-list for extension extendee
	0,   // [0:77] is the sub-list for field type_name
}

func init() { file_controller_client_proto_Controller_proto_init() }
func file_controller_client_proto_Controller_proto_init() {
	if File_controller_client_proto_Controller_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_controller_client_proto_Controller_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReaderGroupConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReaderGroupConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReaderGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReaderGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReaderGroupStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReaderGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKeyValueTableStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValueTableConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValueTableConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValueTableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVTablesInScopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVTablesInScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKVTableStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStreamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStreamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubscriberStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamSubscriberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberStreamCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStreamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScopeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScopeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingTxnStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuationToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamsInScopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamsInScopeWithTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamsInScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetentionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamCutRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeUri); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentsAtTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTxnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTxnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingTxnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamCutRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentRanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEpochSegmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentValidityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamCutValidityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveWriterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveWriterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampFromWriter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentsAtTime_SegmentLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessorResponse_SegmentEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_client_proto_Controller_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleRequest_KeyRangeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_client_proto_Controller_proto_rawDesc,
			NumEnums:      27,
			NumMessages:   73,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_client_proto_Controller_proto_goTypes,
		DependencyIndexes: file_controller_client_proto_Controller_proto_depIdxs,
		EnumInfos:         file_controller_client_proto_Controller_proto_enumTypes,
		MessageInfos:      file_controller_client_proto_Controller_proto_msgTypes,
	}.Build()
	File_controller_client_proto_Controller_proto = out.File
	file_controller_client_proto_Controller_proto_rawDesc = nil
	file_controller_client_proto_Controller_proto_goTypes = nil
	file_controller_client_proto_Controller_proto_depIdxs = nil
}
