// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package controller_api_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerServiceClient interface {
	GetControllerServerList(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	CreateStream(ctx context.Context, in *StreamConfig, opts ...grpc.CallOption) (*CreateStreamStatus, error)
	UpdateStream(ctx context.Context, in *StreamConfig, opts ...grpc.CallOption) (*UpdateStreamStatus, error)
	TruncateStream(ctx context.Context, in *StreamCut, opts ...grpc.CallOption) (*UpdateStreamStatus, error)
	SealStream(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*UpdateStreamStatus, error)
	DeleteStream(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*DeleteStreamStatus, error)
	GetCurrentSegments(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*SegmentRanges, error)
	GetEpochSegments(ctx context.Context, in *GetEpochSegmentsRequest, opts ...grpc.CallOption) (*SegmentRanges, error)
	GetSegments(ctx context.Context, in *GetSegmentsRequest, opts ...grpc.CallOption) (*SegmentsAtTime, error)
	// Deprecated RPC: https://github.com/pravega/pravega/issues/3760
	GetSegmentsImmediatlyFollowing(ctx context.Context, in *SegmentId, opts ...grpc.CallOption) (*SuccessorResponse, error)
	GetSegmentsImmediatelyFollowing(ctx context.Context, in *SegmentId, opts ...grpc.CallOption) (*SuccessorResponse, error)
	GetSegmentsBetween(ctx context.Context, in *StreamCutRange, opts ...grpc.CallOption) (*StreamCutRangeResponse, error)
	Scale(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*ScaleResponse, error)
	CheckScale(ctx context.Context, in *ScaleStatusRequest, opts ...grpc.CallOption) (*ScaleStatusResponse, error)
	GetURI(ctx context.Context, in *SegmentId, opts ...grpc.CallOption) (*NodeUri, error)
	IsSegmentValid(ctx context.Context, in *SegmentId, opts ...grpc.CallOption) (*SegmentValidityResponse, error)
	IsStreamCutValid(ctx context.Context, in *StreamCut, opts ...grpc.CallOption) (*StreamCutValidityResponse, error)
	CreateTransaction(ctx context.Context, in *CreateTxnRequest, opts ...grpc.CallOption) (*CreateTxnResponse, error)
	CommitTransaction(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*TxnStatus, error)
	AbortTransaction(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*TxnStatus, error)
	PingTransaction(ctx context.Context, in *PingTxnRequest, opts ...grpc.CallOption) (*PingTxnStatus, error)
	CheckTransactionState(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*TxnState, error)
	CreateScope(ctx context.Context, in *ScopeInfo, opts ...grpc.CallOption) (*CreateScopeStatus, error)
	ListScopes(ctx context.Context, in *ScopesRequest, opts ...grpc.CallOption) (*ScopesResponse, error)
	CheckScopeExists(ctx context.Context, in *ScopeInfo, opts ...grpc.CallOption) (*ExistsResponse, error)
	CheckStreamExists(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*ExistsResponse, error)
	ListStreamsInScope(ctx context.Context, in *StreamsInScopeRequest, opts ...grpc.CallOption) (*StreamsInScopeResponse, error)
	DeleteScope(ctx context.Context, in *ScopeInfo, opts ...grpc.CallOption) (*DeleteScopeStatus, error)
	DeleteScopeRecursive(ctx context.Context, in *ScopeInfo, opts ...grpc.CallOption) (*DeleteScopeStatus, error)
	GetDelegationToken(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*DelegationToken, error)
	RemoveWriter(ctx context.Context, in *RemoveWriterRequest, opts ...grpc.CallOption) (*RemoveWriterResponse, error)
	NoteTimestampFromWriter(ctx context.Context, in *TimestampFromWriter, opts ...grpc.CallOption) (*TimestampResponse, error)
	CreateKeyValueTable(ctx context.Context, in *KeyValueTableConfig, opts ...grpc.CallOption) (*CreateKeyValueTableStatus, error)
	GetCurrentSegmentsKeyValueTable(ctx context.Context, in *KeyValueTableInfo, opts ...grpc.CallOption) (*SegmentRanges, error)
	ListKeyValueTablesInScope(ctx context.Context, in *KVTablesInScopeRequest, opts ...grpc.CallOption) (*KVTablesInScopeResponse, error)
	GetKeyValueTableConfiguration(ctx context.Context, in *KeyValueTableInfo, opts ...grpc.CallOption) (*KeyValueTableConfigResponse, error)
	DeleteKeyValueTable(ctx context.Context, in *KeyValueTableInfo, opts ...grpc.CallOption) (*DeleteKVTableStatus, error)
	ListSubscribers(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*SubscribersResponse, error)
	UpdateSubscriberStreamCut(ctx context.Context, in *SubscriberStreamCut, opts ...grpc.CallOption) (*UpdateSubscriberStatus, error)
	CreateReaderGroup(ctx context.Context, in *ReaderGroupConfiguration, opts ...grpc.CallOption) (*CreateReaderGroupResponse, error)
	GetReaderGroupConfig(ctx context.Context, in *ReaderGroupInfo, opts ...grpc.CallOption) (*ReaderGroupConfigResponse, error)
	DeleteReaderGroup(ctx context.Context, in *ReaderGroupInfo, opts ...grpc.CallOption) (*DeleteReaderGroupStatus, error)
	UpdateReaderGroup(ctx context.Context, in *ReaderGroupConfiguration, opts ...grpc.CallOption) (*UpdateReaderGroupResponse, error)
	GetStreamConfiguration(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*StreamConfig, error)
	ListStreamsInScopeForTag(ctx context.Context, in *StreamsInScopeWithTagRequest, opts ...grpc.CallOption) (*StreamsInScopeResponse, error)
}

type controllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerServiceClient(cc grpc.ClientConnInterface) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) GetControllerServerList(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getControllerServerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CreateStream(ctx context.Context, in *StreamConfig, opts ...grpc.CallOption) (*CreateStreamStatus, error) {
	out := new(CreateStreamStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/createStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) UpdateStream(ctx context.Context, in *StreamConfig, opts ...grpc.CallOption) (*UpdateStreamStatus, error) {
	out := new(UpdateStreamStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/updateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) TruncateStream(ctx context.Context, in *StreamCut, opts ...grpc.CallOption) (*UpdateStreamStatus, error) {
	out := new(UpdateStreamStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/truncateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) SealStream(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*UpdateStreamStatus, error) {
	out := new(UpdateStreamStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/sealStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteStream(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*DeleteStreamStatus, error) {
	out := new(DeleteStreamStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/deleteStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetCurrentSegments(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*SegmentRanges, error) {
	out := new(SegmentRanges)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getCurrentSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetEpochSegments(ctx context.Context, in *GetEpochSegmentsRequest, opts ...grpc.CallOption) (*SegmentRanges, error) {
	out := new(SegmentRanges)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getEpochSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetSegments(ctx context.Context, in *GetSegmentsRequest, opts ...grpc.CallOption) (*SegmentsAtTime, error) {
	out := new(SegmentsAtTime)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetSegmentsImmediatlyFollowing(ctx context.Context, in *SegmentId, opts ...grpc.CallOption) (*SuccessorResponse, error) {
	out := new(SuccessorResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getSegmentsImmediatlyFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetSegmentsImmediatelyFollowing(ctx context.Context, in *SegmentId, opts ...grpc.CallOption) (*SuccessorResponse, error) {
	out := new(SuccessorResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getSegmentsImmediatelyFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetSegmentsBetween(ctx context.Context, in *StreamCutRange, opts ...grpc.CallOption) (*StreamCutRangeResponse, error) {
	out := new(StreamCutRangeResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getSegmentsBetween", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) Scale(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*ScaleResponse, error) {
	out := new(ScaleResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/scale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CheckScale(ctx context.Context, in *ScaleStatusRequest, opts ...grpc.CallOption) (*ScaleStatusResponse, error) {
	out := new(ScaleStatusResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/checkScale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetURI(ctx context.Context, in *SegmentId, opts ...grpc.CallOption) (*NodeUri, error) {
	out := new(NodeUri)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getURI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) IsSegmentValid(ctx context.Context, in *SegmentId, opts ...grpc.CallOption) (*SegmentValidityResponse, error) {
	out := new(SegmentValidityResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/isSegmentValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) IsStreamCutValid(ctx context.Context, in *StreamCut, opts ...grpc.CallOption) (*StreamCutValidityResponse, error) {
	out := new(StreamCutValidityResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/isStreamCutValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CreateTransaction(ctx context.Context, in *CreateTxnRequest, opts ...grpc.CallOption) (*CreateTxnResponse, error) {
	out := new(CreateTxnResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/createTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CommitTransaction(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*TxnStatus, error) {
	out := new(TxnStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/commitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) AbortTransaction(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*TxnStatus, error) {
	out := new(TxnStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/abortTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) PingTransaction(ctx context.Context, in *PingTxnRequest, opts ...grpc.CallOption) (*PingTxnStatus, error) {
	out := new(PingTxnStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/pingTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CheckTransactionState(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*TxnState, error) {
	out := new(TxnState)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/checkTransactionState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CreateScope(ctx context.Context, in *ScopeInfo, opts ...grpc.CallOption) (*CreateScopeStatus, error) {
	out := new(CreateScopeStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/createScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListScopes(ctx context.Context, in *ScopesRequest, opts ...grpc.CallOption) (*ScopesResponse, error) {
	out := new(ScopesResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/listScopes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CheckScopeExists(ctx context.Context, in *ScopeInfo, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/checkScopeExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CheckStreamExists(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/checkStreamExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListStreamsInScope(ctx context.Context, in *StreamsInScopeRequest, opts ...grpc.CallOption) (*StreamsInScopeResponse, error) {
	out := new(StreamsInScopeResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/listStreamsInScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteScope(ctx context.Context, in *ScopeInfo, opts ...grpc.CallOption) (*DeleteScopeStatus, error) {
	out := new(DeleteScopeStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/deleteScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteScopeRecursive(ctx context.Context, in *ScopeInfo, opts ...grpc.CallOption) (*DeleteScopeStatus, error) {
	out := new(DeleteScopeStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/deleteScopeRecursive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetDelegationToken(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*DelegationToken, error) {
	out := new(DelegationToken)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getDelegationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) RemoveWriter(ctx context.Context, in *RemoveWriterRequest, opts ...grpc.CallOption) (*RemoveWriterResponse, error) {
	out := new(RemoveWriterResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/removeWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) NoteTimestampFromWriter(ctx context.Context, in *TimestampFromWriter, opts ...grpc.CallOption) (*TimestampResponse, error) {
	out := new(TimestampResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/noteTimestampFromWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CreateKeyValueTable(ctx context.Context, in *KeyValueTableConfig, opts ...grpc.CallOption) (*CreateKeyValueTableStatus, error) {
	out := new(CreateKeyValueTableStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/createKeyValueTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetCurrentSegmentsKeyValueTable(ctx context.Context, in *KeyValueTableInfo, opts ...grpc.CallOption) (*SegmentRanges, error) {
	out := new(SegmentRanges)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getCurrentSegmentsKeyValueTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListKeyValueTablesInScope(ctx context.Context, in *KVTablesInScopeRequest, opts ...grpc.CallOption) (*KVTablesInScopeResponse, error) {
	out := new(KVTablesInScopeResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/listKeyValueTablesInScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetKeyValueTableConfiguration(ctx context.Context, in *KeyValueTableInfo, opts ...grpc.CallOption) (*KeyValueTableConfigResponse, error) {
	out := new(KeyValueTableConfigResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getKeyValueTableConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteKeyValueTable(ctx context.Context, in *KeyValueTableInfo, opts ...grpc.CallOption) (*DeleteKVTableStatus, error) {
	out := new(DeleteKVTableStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/deleteKeyValueTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListSubscribers(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*SubscribersResponse, error) {
	out := new(SubscribersResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/listSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) UpdateSubscriberStreamCut(ctx context.Context, in *SubscriberStreamCut, opts ...grpc.CallOption) (*UpdateSubscriberStatus, error) {
	out := new(UpdateSubscriberStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/updateSubscriberStreamCut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CreateReaderGroup(ctx context.Context, in *ReaderGroupConfiguration, opts ...grpc.CallOption) (*CreateReaderGroupResponse, error) {
	out := new(CreateReaderGroupResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/createReaderGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetReaderGroupConfig(ctx context.Context, in *ReaderGroupInfo, opts ...grpc.CallOption) (*ReaderGroupConfigResponse, error) {
	out := new(ReaderGroupConfigResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getReaderGroupConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteReaderGroup(ctx context.Context, in *ReaderGroupInfo, opts ...grpc.CallOption) (*DeleteReaderGroupStatus, error) {
	out := new(DeleteReaderGroupStatus)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/deleteReaderGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) UpdateReaderGroup(ctx context.Context, in *ReaderGroupConfiguration, opts ...grpc.CallOption) (*UpdateReaderGroupResponse, error) {
	out := new(UpdateReaderGroupResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/updateReaderGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetStreamConfiguration(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*StreamConfig, error) {
	out := new(StreamConfig)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getStreamConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListStreamsInScopeForTag(ctx context.Context, in *StreamsInScopeWithTagRequest, opts ...grpc.CallOption) (*StreamsInScopeResponse, error) {
	out := new(StreamsInScopeResponse)
	err := c.cc.Invoke(ctx, "/io.pravega.controller.stream.api.grpc.v1.ControllerService/listStreamsInScopeForTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServiceServer is the server API for ControllerService service.
// All implementations must embed UnimplementedControllerServiceServer
// for forward compatibility
type ControllerServiceServer interface {
	GetControllerServerList(context.Context, *ServerRequest) (*ServerResponse, error)
	CreateStream(context.Context, *StreamConfig) (*CreateStreamStatus, error)
	UpdateStream(context.Context, *StreamConfig) (*UpdateStreamStatus, error)
	TruncateStream(context.Context, *StreamCut) (*UpdateStreamStatus, error)
	SealStream(context.Context, *StreamInfo) (*UpdateStreamStatus, error)
	DeleteStream(context.Context, *StreamInfo) (*DeleteStreamStatus, error)
	GetCurrentSegments(context.Context, *StreamInfo) (*SegmentRanges, error)
	GetEpochSegments(context.Context, *GetEpochSegmentsRequest) (*SegmentRanges, error)
	GetSegments(context.Context, *GetSegmentsRequest) (*SegmentsAtTime, error)
	// Deprecated RPC: https://github.com/pravega/pravega/issues/3760
	GetSegmentsImmediatlyFollowing(context.Context, *SegmentId) (*SuccessorResponse, error)
	GetSegmentsImmediatelyFollowing(context.Context, *SegmentId) (*SuccessorResponse, error)
	GetSegmentsBetween(context.Context, *StreamCutRange) (*StreamCutRangeResponse, error)
	Scale(context.Context, *ScaleRequest) (*ScaleResponse, error)
	CheckScale(context.Context, *ScaleStatusRequest) (*ScaleStatusResponse, error)
	GetURI(context.Context, *SegmentId) (*NodeUri, error)
	IsSegmentValid(context.Context, *SegmentId) (*SegmentValidityResponse, error)
	IsStreamCutValid(context.Context, *StreamCut) (*StreamCutValidityResponse, error)
	CreateTransaction(context.Context, *CreateTxnRequest) (*CreateTxnResponse, error)
	CommitTransaction(context.Context, *TxnRequest) (*TxnStatus, error)
	AbortTransaction(context.Context, *TxnRequest) (*TxnStatus, error)
	PingTransaction(context.Context, *PingTxnRequest) (*PingTxnStatus, error)
	CheckTransactionState(context.Context, *TxnRequest) (*TxnState, error)
	CreateScope(context.Context, *ScopeInfo) (*CreateScopeStatus, error)
	ListScopes(context.Context, *ScopesRequest) (*ScopesResponse, error)
	CheckScopeExists(context.Context, *ScopeInfo) (*ExistsResponse, error)
	CheckStreamExists(context.Context, *StreamInfo) (*ExistsResponse, error)
	ListStreamsInScope(context.Context, *StreamsInScopeRequest) (*StreamsInScopeResponse, error)
	DeleteScope(context.Context, *ScopeInfo) (*DeleteScopeStatus, error)
	DeleteScopeRecursive(context.Context, *ScopeInfo) (*DeleteScopeStatus, error)
	GetDelegationToken(context.Context, *StreamInfo) (*DelegationToken, error)
	RemoveWriter(context.Context, *RemoveWriterRequest) (*RemoveWriterResponse, error)
	NoteTimestampFromWriter(context.Context, *TimestampFromWriter) (*TimestampResponse, error)
	CreateKeyValueTable(context.Context, *KeyValueTableConfig) (*CreateKeyValueTableStatus, error)
	GetCurrentSegmentsKeyValueTable(context.Context, *KeyValueTableInfo) (*SegmentRanges, error)
	ListKeyValueTablesInScope(context.Context, *KVTablesInScopeRequest) (*KVTablesInScopeResponse, error)
	GetKeyValueTableConfiguration(context.Context, *KeyValueTableInfo) (*KeyValueTableConfigResponse, error)
	DeleteKeyValueTable(context.Context, *KeyValueTableInfo) (*DeleteKVTableStatus, error)
	ListSubscribers(context.Context, *StreamInfo) (*SubscribersResponse, error)
	UpdateSubscriberStreamCut(context.Context, *SubscriberStreamCut) (*UpdateSubscriberStatus, error)
	CreateReaderGroup(context.Context, *ReaderGroupConfiguration) (*CreateReaderGroupResponse, error)
	GetReaderGroupConfig(context.Context, *ReaderGroupInfo) (*ReaderGroupConfigResponse, error)
	DeleteReaderGroup(context.Context, *ReaderGroupInfo) (*DeleteReaderGroupStatus, error)
	UpdateReaderGroup(context.Context, *ReaderGroupConfiguration) (*UpdateReaderGroupResponse, error)
	GetStreamConfiguration(context.Context, *StreamInfo) (*StreamConfig, error)
	ListStreamsInScopeForTag(context.Context, *StreamsInScopeWithTagRequest) (*StreamsInScopeResponse, error)
	mustEmbedUnimplementedControllerServiceServer()
}

// UnimplementedControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServiceServer struct {
}

func (UnimplementedControllerServiceServer) GetControllerServerList(context.Context, *ServerRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControllerServerList not implemented")
}
func (UnimplementedControllerServiceServer) CreateStream(context.Context, *StreamConfig) (*CreateStreamStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedControllerServiceServer) UpdateStream(context.Context, *StreamConfig) (*UpdateStreamStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStream not implemented")
}
func (UnimplementedControllerServiceServer) TruncateStream(context.Context, *StreamCut) (*UpdateStreamStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateStream not implemented")
}
func (UnimplementedControllerServiceServer) SealStream(context.Context, *StreamInfo) (*UpdateStreamStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SealStream not implemented")
}
func (UnimplementedControllerServiceServer) DeleteStream(context.Context, *StreamInfo) (*DeleteStreamStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStream not implemented")
}
func (UnimplementedControllerServiceServer) GetCurrentSegments(context.Context, *StreamInfo) (*SegmentRanges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSegments not implemented")
}
func (UnimplementedControllerServiceServer) GetEpochSegments(context.Context, *GetEpochSegmentsRequest) (*SegmentRanges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpochSegments not implemented")
}
func (UnimplementedControllerServiceServer) GetSegments(context.Context, *GetSegmentsRequest) (*SegmentsAtTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegments not implemented")
}
func (UnimplementedControllerServiceServer) GetSegmentsImmediatlyFollowing(context.Context, *SegmentId) (*SuccessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentsImmediatlyFollowing not implemented")
}
func (UnimplementedControllerServiceServer) GetSegmentsImmediatelyFollowing(context.Context, *SegmentId) (*SuccessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentsImmediatelyFollowing not implemented")
}
func (UnimplementedControllerServiceServer) GetSegmentsBetween(context.Context, *StreamCutRange) (*StreamCutRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentsBetween not implemented")
}
func (UnimplementedControllerServiceServer) Scale(context.Context, *ScaleRequest) (*ScaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scale not implemented")
}
func (UnimplementedControllerServiceServer) CheckScale(context.Context, *ScaleStatusRequest) (*ScaleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckScale not implemented")
}
func (UnimplementedControllerServiceServer) GetURI(context.Context, *SegmentId) (*NodeUri, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURI not implemented")
}
func (UnimplementedControllerServiceServer) IsSegmentValid(context.Context, *SegmentId) (*SegmentValidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSegmentValid not implemented")
}
func (UnimplementedControllerServiceServer) IsStreamCutValid(context.Context, *StreamCut) (*StreamCutValidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsStreamCutValid not implemented")
}
func (UnimplementedControllerServiceServer) CreateTransaction(context.Context, *CreateTxnRequest) (*CreateTxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedControllerServiceServer) CommitTransaction(context.Context, *TxnRequest) (*TxnStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTransaction not implemented")
}
func (UnimplementedControllerServiceServer) AbortTransaction(context.Context, *TxnRequest) (*TxnStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortTransaction not implemented")
}
func (UnimplementedControllerServiceServer) PingTransaction(context.Context, *PingTxnRequest) (*PingTxnStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingTransaction not implemented")
}
func (UnimplementedControllerServiceServer) CheckTransactionState(context.Context, *TxnRequest) (*TxnState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTransactionState not implemented")
}
func (UnimplementedControllerServiceServer) CreateScope(context.Context, *ScopeInfo) (*CreateScopeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScope not implemented")
}
func (UnimplementedControllerServiceServer) ListScopes(con context.Context, re *ScopesRequest) (*ScopesResponse, error) {
	print(re.String())
	ss := []string{"aaaa", "vvvvv", "dddd", "eeeee"}
	resp := &ScopesResponse{
		Scopes: ss,
	}
	return resp, nil
}
func (UnimplementedControllerServiceServer) CheckScopeExists(context.Context, *ScopeInfo) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckScopeExists not implemented")
}
func (UnimplementedControllerServiceServer) CheckStreamExists(context.Context, *StreamInfo) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStreamExists not implemented")
}
func (UnimplementedControllerServiceServer) ListStreamsInScope(context.Context, *StreamsInScopeRequest) (*StreamsInScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamsInScope not implemented")
}
func (UnimplementedControllerServiceServer) DeleteScope(context.Context, *ScopeInfo) (*DeleteScopeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScope not implemented")
}
func (UnimplementedControllerServiceServer) DeleteScopeRecursive(context.Context, *ScopeInfo) (*DeleteScopeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScopeRecursive not implemented")
}
func (UnimplementedControllerServiceServer) GetDelegationToken(context.Context, *StreamInfo) (*DelegationToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegationToken not implemented")
}
func (UnimplementedControllerServiceServer) RemoveWriter(context.Context, *RemoveWriterRequest) (*RemoveWriterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWriter not implemented")
}
func (UnimplementedControllerServiceServer) NoteTimestampFromWriter(context.Context, *TimestampFromWriter) (*TimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoteTimestampFromWriter not implemented")
}
func (UnimplementedControllerServiceServer) CreateKeyValueTable(context.Context, *KeyValueTableConfig) (*CreateKeyValueTableStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyValueTable not implemented")
}
func (UnimplementedControllerServiceServer) GetCurrentSegmentsKeyValueTable(context.Context, *KeyValueTableInfo) (*SegmentRanges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSegmentsKeyValueTable not implemented")
}
func (UnimplementedControllerServiceServer) ListKeyValueTablesInScope(context.Context, *KVTablesInScopeRequest) (*KVTablesInScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyValueTablesInScope not implemented")
}
func (UnimplementedControllerServiceServer) GetKeyValueTableConfiguration(context.Context, *KeyValueTableInfo) (*KeyValueTableConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyValueTableConfiguration not implemented")
}
func (UnimplementedControllerServiceServer) DeleteKeyValueTable(context.Context, *KeyValueTableInfo) (*DeleteKVTableStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyValueTable not implemented")
}
func (UnimplementedControllerServiceServer) ListSubscribers(context.Context, *StreamInfo) (*SubscribersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribers not implemented")
}
func (UnimplementedControllerServiceServer) UpdateSubscriberStreamCut(context.Context, *SubscriberStreamCut) (*UpdateSubscriberStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriberStreamCut not implemented")
}
func (UnimplementedControllerServiceServer) CreateReaderGroup(context.Context, *ReaderGroupConfiguration) (*CreateReaderGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReaderGroup not implemented")
}
func (UnimplementedControllerServiceServer) GetReaderGroupConfig(context.Context, *ReaderGroupInfo) (*ReaderGroupConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReaderGroupConfig not implemented")
}
func (UnimplementedControllerServiceServer) DeleteReaderGroup(context.Context, *ReaderGroupInfo) (*DeleteReaderGroupStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReaderGroup not implemented")
}
func (UnimplementedControllerServiceServer) UpdateReaderGroup(context.Context, *ReaderGroupConfiguration) (*UpdateReaderGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReaderGroup not implemented")
}
func (UnimplementedControllerServiceServer) GetStreamConfiguration(context.Context, *StreamInfo) (*StreamConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamConfiguration not implemented")
}
func (UnimplementedControllerServiceServer) ListStreamsInScopeForTag(context.Context, *StreamsInScopeWithTagRequest) (*StreamsInScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamsInScopeForTag not implemented")
}
func (UnimplementedControllerServiceServer) mustEmbedUnimplementedControllerServiceServer() {}

// UnsafeControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServiceServer will
// result in compilation errors.
type UnsafeControllerServiceServer interface {
	mustEmbedUnimplementedControllerServiceServer()
}

func RegisterControllerServiceServer(s grpc.ServiceRegistrar, srv ControllerServiceServer) {
	s.RegisterService(&ControllerService_ServiceDesc, srv)
}

func _ControllerService_GetControllerServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetControllerServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getControllerServerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetControllerServerList(ctx, req.(*ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/createStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CreateStream(ctx, req.(*StreamConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_UpdateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).UpdateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/updateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).UpdateStream(ctx, req.(*StreamConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_TruncateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamCut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).TruncateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/truncateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).TruncateStream(ctx, req.(*StreamCut))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_SealStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).SealStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/sealStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).SealStream(ctx, req.(*StreamInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/deleteStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteStream(ctx, req.(*StreamInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetCurrentSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetCurrentSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getCurrentSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetCurrentSegments(ctx, req.(*StreamInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetEpochSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpochSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetEpochSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getEpochSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetEpochSegments(ctx, req.(*GetEpochSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetSegments(ctx, req.(*GetSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetSegmentsImmediatlyFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetSegmentsImmediatlyFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getSegmentsImmediatlyFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetSegmentsImmediatlyFollowing(ctx, req.(*SegmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetSegmentsImmediatelyFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetSegmentsImmediatelyFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getSegmentsImmediatelyFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetSegmentsImmediatelyFollowing(ctx, req.(*SegmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetSegmentsBetween_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamCutRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetSegmentsBetween(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getSegmentsBetween",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetSegmentsBetween(ctx, req.(*StreamCutRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_Scale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).Scale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/scale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).Scale(ctx, req.(*ScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CheckScale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CheckScale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/checkScale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CheckScale(ctx, req.(*ScaleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetURI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetURI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getURI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetURI(ctx, req.(*SegmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_IsSegmentValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).IsSegmentValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/isSegmentValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).IsSegmentValid(ctx, req.(*SegmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_IsStreamCutValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamCut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).IsStreamCutValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/isStreamCutValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).IsStreamCutValid(ctx, req.(*StreamCut))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/createTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CreateTransaction(ctx, req.(*CreateTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CommitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CommitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/commitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CommitTransaction(ctx, req.(*TxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_AbortTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).AbortTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/abortTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).AbortTransaction(ctx, req.(*TxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_PingTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).PingTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/pingTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).PingTransaction(ctx, req.(*PingTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CheckTransactionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CheckTransactionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/checkTransactionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CheckTransactionState(ctx, req.(*TxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CreateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CreateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/createScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CreateScope(ctx, req.(*ScopeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/listScopes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListScopes(ctx, req.(*ScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CheckScopeExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CheckScopeExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/checkScopeExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CheckScopeExists(ctx, req.(*ScopeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CheckStreamExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CheckStreamExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/checkStreamExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CheckStreamExists(ctx, req.(*StreamInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListStreamsInScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamsInScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListStreamsInScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/listStreamsInScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListStreamsInScope(ctx, req.(*StreamsInScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/deleteScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteScope(ctx, req.(*ScopeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteScopeRecursive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteScopeRecursive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/deleteScopeRecursive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteScopeRecursive(ctx, req.(*ScopeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetDelegationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetDelegationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getDelegationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetDelegationToken(ctx, req.(*StreamInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_RemoveWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).RemoveWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/removeWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).RemoveWriter(ctx, req.(*RemoveWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_NoteTimestampFromWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimestampFromWriter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).NoteTimestampFromWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/noteTimestampFromWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).NoteTimestampFromWriter(ctx, req.(*TimestampFromWriter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CreateKeyValueTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueTableConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CreateKeyValueTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/createKeyValueTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CreateKeyValueTable(ctx, req.(*KeyValueTableConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetCurrentSegmentsKeyValueTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueTableInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetCurrentSegmentsKeyValueTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getCurrentSegmentsKeyValueTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetCurrentSegmentsKeyValueTable(ctx, req.(*KeyValueTableInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListKeyValueTablesInScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVTablesInScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListKeyValueTablesInScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/listKeyValueTablesInScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListKeyValueTablesInScope(ctx, req.(*KVTablesInScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetKeyValueTableConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueTableInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetKeyValueTableConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getKeyValueTableConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetKeyValueTableConfiguration(ctx, req.(*KeyValueTableInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteKeyValueTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueTableInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteKeyValueTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/deleteKeyValueTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteKeyValueTable(ctx, req.(*KeyValueTableInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/listSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListSubscribers(ctx, req.(*StreamInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_UpdateSubscriberStreamCut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberStreamCut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).UpdateSubscriberStreamCut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/updateSubscriberStreamCut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).UpdateSubscriberStreamCut(ctx, req.(*SubscriberStreamCut))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CreateReaderGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReaderGroupConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CreateReaderGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/createReaderGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CreateReaderGroup(ctx, req.(*ReaderGroupConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetReaderGroupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReaderGroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetReaderGroupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getReaderGroupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetReaderGroupConfig(ctx, req.(*ReaderGroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteReaderGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReaderGroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteReaderGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/deleteReaderGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteReaderGroup(ctx, req.(*ReaderGroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_UpdateReaderGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReaderGroupConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).UpdateReaderGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/updateReaderGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).UpdateReaderGroup(ctx, req.(*ReaderGroupConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetStreamConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetStreamConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/getStreamConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetStreamConfiguration(ctx, req.(*StreamInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListStreamsInScopeForTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamsInScopeWithTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListStreamsInScopeForTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pravega.controller.stream.api.grpc.v1.ControllerService/listStreamsInScopeForTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListStreamsInScopeForTag(ctx, req.(*StreamsInScopeWithTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControllerService_ServiceDesc is the grpc.ServiceDesc for ControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.pravega.controller.stream.api.grpc.v1.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getControllerServerList",
			Handler:    _ControllerService_GetControllerServerList_Handler,
		},
		{
			MethodName: "createStream",
			Handler:    _ControllerService_CreateStream_Handler,
		},
		{
			MethodName: "updateStream",
			Handler:    _ControllerService_UpdateStream_Handler,
		},
		{
			MethodName: "truncateStream",
			Handler:    _ControllerService_TruncateStream_Handler,
		},
		{
			MethodName: "sealStream",
			Handler:    _ControllerService_SealStream_Handler,
		},
		{
			MethodName: "deleteStream",
			Handler:    _ControllerService_DeleteStream_Handler,
		},
		{
			MethodName: "getCurrentSegments",
			Handler:    _ControllerService_GetCurrentSegments_Handler,
		},
		{
			MethodName: "getEpochSegments",
			Handler:    _ControllerService_GetEpochSegments_Handler,
		},
		{
			MethodName: "getSegments",
			Handler:    _ControllerService_GetSegments_Handler,
		},
		{
			MethodName: "getSegmentsImmediatlyFollowing",
			Handler:    _ControllerService_GetSegmentsImmediatlyFollowing_Handler,
		},
		{
			MethodName: "getSegmentsImmediatelyFollowing",
			Handler:    _ControllerService_GetSegmentsImmediatelyFollowing_Handler,
		},
		{
			MethodName: "getSegmentsBetween",
			Handler:    _ControllerService_GetSegmentsBetween_Handler,
		},
		{
			MethodName: "scale",
			Handler:    _ControllerService_Scale_Handler,
		},
		{
			MethodName: "checkScale",
			Handler:    _ControllerService_CheckScale_Handler,
		},
		{
			MethodName: "getURI",
			Handler:    _ControllerService_GetURI_Handler,
		},
		{
			MethodName: "isSegmentValid",
			Handler:    _ControllerService_IsSegmentValid_Handler,
		},
		{
			MethodName: "isStreamCutValid",
			Handler:    _ControllerService_IsStreamCutValid_Handler,
		},
		{
			MethodName: "createTransaction",
			Handler:    _ControllerService_CreateTransaction_Handler,
		},
		{
			MethodName: "commitTransaction",
			Handler:    _ControllerService_CommitTransaction_Handler,
		},
		{
			MethodName: "abortTransaction",
			Handler:    _ControllerService_AbortTransaction_Handler,
		},
		{
			MethodName: "pingTransaction",
			Handler:    _ControllerService_PingTransaction_Handler,
		},
		{
			MethodName: "checkTransactionState",
			Handler:    _ControllerService_CheckTransactionState_Handler,
		},
		{
			MethodName: "createScope",
			Handler:    _ControllerService_CreateScope_Handler,
		},
		{
			MethodName: "listScopes",
			Handler:    _ControllerService_ListScopes_Handler,
		},
		{
			MethodName: "checkScopeExists",
			Handler:    _ControllerService_CheckScopeExists_Handler,
		},
		{
			MethodName: "checkStreamExists",
			Handler:    _ControllerService_CheckStreamExists_Handler,
		},
		{
			MethodName: "listStreamsInScope",
			Handler:    _ControllerService_ListStreamsInScope_Handler,
		},
		{
			MethodName: "deleteScope",
			Handler:    _ControllerService_DeleteScope_Handler,
		},
		{
			MethodName: "deleteScopeRecursive",
			Handler:    _ControllerService_DeleteScopeRecursive_Handler,
		},
		{
			MethodName: "getDelegationToken",
			Handler:    _ControllerService_GetDelegationToken_Handler,
		},
		{
			MethodName: "removeWriter",
			Handler:    _ControllerService_RemoveWriter_Handler,
		},
		{
			MethodName: "noteTimestampFromWriter",
			Handler:    _ControllerService_NoteTimestampFromWriter_Handler,
		},
		{
			MethodName: "createKeyValueTable",
			Handler:    _ControllerService_CreateKeyValueTable_Handler,
		},
		{
			MethodName: "getCurrentSegmentsKeyValueTable",
			Handler:    _ControllerService_GetCurrentSegmentsKeyValueTable_Handler,
		},
		{
			MethodName: "listKeyValueTablesInScope",
			Handler:    _ControllerService_ListKeyValueTablesInScope_Handler,
		},
		{
			MethodName: "getKeyValueTableConfiguration",
			Handler:    _ControllerService_GetKeyValueTableConfiguration_Handler,
		},
		{
			MethodName: "deleteKeyValueTable",
			Handler:    _ControllerService_DeleteKeyValueTable_Handler,
		},
		{
			MethodName: "listSubscribers",
			Handler:    _ControllerService_ListSubscribers_Handler,
		},
		{
			MethodName: "updateSubscriberStreamCut",
			Handler:    _ControllerService_UpdateSubscriberStreamCut_Handler,
		},
		{
			MethodName: "createReaderGroup",
			Handler:    _ControllerService_CreateReaderGroup_Handler,
		},
		{
			MethodName: "getReaderGroupConfig",
			Handler:    _ControllerService_GetReaderGroupConfig_Handler,
		},
		{
			MethodName: "deleteReaderGroup",
			Handler:    _ControllerService_DeleteReaderGroup_Handler,
		},
		{
			MethodName: "updateReaderGroup",
			Handler:    _ControllerService_UpdateReaderGroup_Handler,
		},
		{
			MethodName: "getStreamConfiguration",
			Handler:    _ControllerService_GetStreamConfiguration_Handler,
		},
		{
			MethodName: "listStreamsInScopeForTag",
			Handler:    _ControllerService_ListStreamsInScopeForTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller-client/proto/Controller.proto",
}
